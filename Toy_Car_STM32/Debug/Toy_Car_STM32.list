
Toy_Car_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b68  08004b68  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004b68  08004b68  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b68  08004b68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001144  20000074  08004be4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011b8  08004be4  000211b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010082  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e1  00000000  00000000  0003011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00032700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f58  00000000  00000000  00033740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018afe  00000000  00000000  00034698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff0a  00000000  00000000  0004d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091bba  00000000  00000000  0005d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eec5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000473c  00000000  00000000  000eecac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004a20 	.word	0x08004a20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004a20 	.word	0x08004a20

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2uiz>:
 800060c:	0042      	lsls	r2, r0, #1
 800060e:	d20e      	bcs.n	800062e <__aeabi_f2uiz+0x22>
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30b      	bcc.n	800062e <__aeabi_f2uiz+0x22>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d409      	bmi.n	8000634 <__aeabi_f2uiz+0x28>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	4770      	bx	lr
 800062e:	f04f 0000 	mov.w	r0, #0
 8000632:	4770      	bx	lr
 8000634:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000638:	d101      	bne.n	800063e <__aeabi_f2uiz+0x32>
 800063a:	0242      	lsls	r2, r0, #9
 800063c:	d102      	bne.n	8000644 <__aeabi_f2uiz+0x38>
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	4770      	bx	lr
 8000644:	f04f 0000 	mov.w	r0, #0
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4a06      	ldr	r2, [pc, #24]	; (8000674 <vApplicationGetIdleTaskMemory+0x28>)
 800065c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <vApplicationGetIdleTaskMemory+0x2c>)
 8000662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	20000090 	.word	0x20000090
 8000678:	20000144 	.word	0x20000144

0800067c <Bluetooth_Receive>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char Bluetooth_Receive(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  char btData = '\0';
 8000682:	2300      	movs	r3, #0
 8000684:	71fb      	strb	r3, [r7, #7]
  if((huart1.Instance->SR & USART_SR_RXNE) == USART_SR_RXNE)
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <Bluetooth_Receive+0x2c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f003 0320 	and.w	r3, r3, #32
 8000690:	2b20      	cmp	r3, #32
 8000692:	d103      	bne.n	800069c <Bluetooth_Receive+0x20>
  {
     btData = huart1.Instance->DR;
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <Bluetooth_Receive+0x2c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	71fb      	strb	r3, [r7, #7]
  }
  return btData;
 800069c:	79fb      	ldrb	r3, [r7, #7]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	2000041c 	.word	0x2000041c

080006ac <Servo_SetPosition>:

void Servo_SetPosition(uint16_t pos)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pos);
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <Servo_SetPosition+0x1c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	88fa      	ldrh	r2, [r7, #6]
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000344 	.word	0x20000344

080006cc <Move_Forward>:

void Move_Forward(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,SPEED_60PERCENT);
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <Move_Forward+0x48>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d8:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,SPEED_60PERCENT);
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <Move_Forward+0x48>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e2:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_GPIO_WritePin(leftMotor_GPIO_Port,leftMotor_Pin,GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ea:	480b      	ldr	r0, [pc, #44]	; (8000718 <Move_Forward+0x4c>)
 80006ec:	f001 f8aa 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(rightMotor_GPIO_Port,rightMotor_Pin,GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006f6:	4808      	ldr	r0, [pc, #32]	; (8000718 <Move_Forward+0x4c>)
 80006f8:	f001 f8a4 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(leftMotor2_GPIO_Port,leftMotor2_Pin,GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2110      	movs	r1, #16
 8000700:	4806      	ldr	r0, [pc, #24]	; (800071c <Move_Forward+0x50>)
 8000702:	f001 f89f 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(rightMotor2_GPIO_Port,rightMotor2_Pin,GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	4804      	ldr	r0, [pc, #16]	; (800071c <Move_Forward+0x50>)
 800070c:	f001 f89a 	bl	8001844 <HAL_GPIO_WritePin>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000038c 	.word	0x2000038c
 8000718:	40010c00 	.word	0x40010c00
 800071c:	40010800 	.word	0x40010800

08000720 <Reverse>:

void Reverse(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,SPEED_60PERCENT);
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <Reverse+0x48>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800072c:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,SPEED_60PERCENT);
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <Reverse+0x48>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000736:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_GPIO_WritePin(leftMotor_GPIO_Port,leftMotor_Pin,GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <Reverse+0x4c>)
 8000740:	f001 f880 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(rightMotor_GPIO_Port,rightMotor_Pin,GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <Reverse+0x4c>)
 800074c:	f001 f87a 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(leftMotor2_GPIO_Port,leftMotor2_Pin,GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2110      	movs	r1, #16
 8000754:	4806      	ldr	r0, [pc, #24]	; (8000770 <Reverse+0x50>)
 8000756:	f001 f875 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(rightMotor2_GPIO_Port,rightMotor2_Pin,GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2120      	movs	r1, #32
 800075e:	4804      	ldr	r0, [pc, #16]	; (8000770 <Reverse+0x50>)
 8000760:	f001 f870 	bl	8001844 <HAL_GPIO_WritePin>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000038c 	.word	0x2000038c
 800076c:	40010c00 	.word	0x40010c00
 8000770:	40010800 	.word	0x40010800

08000774 <Turn_Right>:

void Turn_Right(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,SPEED_60PERCENT);
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <Turn_Right+0x48>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000780:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,SPEED_60PERCENT);
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <Turn_Right+0x48>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800078a:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_GPIO_WritePin(leftMotor_GPIO_Port,leftMotor_Pin,GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000792:	480b      	ldr	r0, [pc, #44]	; (80007c0 <Turn_Right+0x4c>)
 8000794:	f001 f856 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(rightMotor_GPIO_Port,rightMotor_Pin,GPIO_PIN_RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <Turn_Right+0x4c>)
 80007a0:	f001 f850 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(leftMotor2_GPIO_Port,leftMotor2_Pin,GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2110      	movs	r1, #16
 80007a8:	4806      	ldr	r0, [pc, #24]	; (80007c4 <Turn_Right+0x50>)
 80007aa:	f001 f84b 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(rightMotor2_GPIO_Port,rightMotor2_Pin,GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2120      	movs	r1, #32
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <Turn_Right+0x50>)
 80007b4:	f001 f846 	bl	8001844 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000038c 	.word	0x2000038c
 80007c0:	40010c00 	.word	0x40010c00
 80007c4:	40010800 	.word	0x40010800

080007c8 <Turn_Left>:

void Turn_Left(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,SPEED_60PERCENT);
 80007cc:	4b10      	ldr	r3, [pc, #64]	; (8000810 <Turn_Left+0x48>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007d4:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,SPEED_60PERCENT);
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <Turn_Left+0x48>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007de:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_GPIO_WritePin(leftMotor_GPIO_Port,leftMotor_Pin,GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e6:	480b      	ldr	r0, [pc, #44]	; (8000814 <Turn_Left+0x4c>)
 80007e8:	f001 f82c 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(rightMotor_GPIO_Port,rightMotor_Pin,GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f2:	4808      	ldr	r0, [pc, #32]	; (8000814 <Turn_Left+0x4c>)
 80007f4:	f001 f826 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(leftMotor2_GPIO_Port,leftMotor2_Pin,GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2110      	movs	r1, #16
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <Turn_Left+0x50>)
 80007fe:	f001 f821 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(rightMotor2_GPIO_Port,rightMotor2_Pin,GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <Turn_Left+0x50>)
 8000808:	f001 f81c 	bl	8001844 <HAL_GPIO_WritePin>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000038c 	.word	0x2000038c
 8000814:	40010c00 	.word	0x40010c00
 8000818:	40010800 	.word	0x40010800

0800081c <Stop>:

void Stop(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,NO_SPEED);
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <Stop+0x44>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2200      	movs	r2, #0
 8000826:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,NO_SPEED);
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <Stop+0x44>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_GPIO_WritePin(leftMotor_GPIO_Port,leftMotor_Pin,GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <Stop+0x48>)
 8000838:	f001 f804 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(rightMotor_GPIO_Port,rightMotor_Pin,GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000842:	4808      	ldr	r0, [pc, #32]	; (8000864 <Stop+0x48>)
 8000844:	f000 fffe 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(leftMotor2_GPIO_Port,leftMotor2_Pin,GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2110      	movs	r1, #16
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <Stop+0x4c>)
 800084e:	f000 fff9 	bl	8001844 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(rightMotor2_GPIO_Port,rightMotor2_Pin,GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2120      	movs	r1, #32
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <Stop+0x4c>)
 8000858:	f000 fff4 	bl	8001844 <HAL_GPIO_WritePin>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000038c 	.word	0x2000038c
 8000864:	40010c00 	.word	0x40010c00
 8000868:	40010800 	.word	0x40010800

0800086c <Sensor_GetDistance>:

uint32_t Sensor_GetDistance(void)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
  const uint32_t sysClockFreq = 8000000;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <Sensor_GetDistance+0x78>)
 8000874:	60bb      	str	r3, [r7, #8]
  uint32_t distanceCM;
  if((htim4.Instance->SR & TIM_SR_CC2IF) == TIM_SR_CC2IF)
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <Sensor_GetDistance+0x7c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	691b      	ldr	r3, [r3, #16]
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	2b04      	cmp	r3, #4
 8000882:	d12a      	bne.n	80008da <Sensor_GetDistance+0x6e>
  {
    uint32_t pulseWidth = htim4.Instance->CCR2;
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <Sensor_GetDistance+0x7c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800088a:	607b      	str	r3, [r7, #4]
    distanceCM = (float)pulseWidth * htim4.Init.Prescaler * 1000000 / (58 * sysClockFreq);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fd15 	bl	80002bc <__aeabi_ui2f>
 8000892:	4604      	mov	r4, r0
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <Sensor_GetDistance+0x7c>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fd0f 	bl	80002bc <__aeabi_ui2f>
 800089e:	4603      	mov	r3, r0
 80008a0:	4619      	mov	r1, r3
 80008a2:	4620      	mov	r0, r4
 80008a4:	f7ff fd62 	bl	800036c <__aeabi_fmul>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4910      	ldr	r1, [pc, #64]	; (80008ec <Sensor_GetDistance+0x80>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fd5d 	bl	800036c <__aeabi_fmul>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461c      	mov	r4, r3
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	223a      	movs	r2, #58	; 0x3a
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fcfc 	bl	80002bc <__aeabi_ui2f>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4619      	mov	r1, r3
 80008c8:	4620      	mov	r0, r4
 80008ca:	f7ff fe03 	bl	80004d4 <__aeabi_fdiv>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe9b 	bl	800060c <__aeabi_f2uiz>
 80008d6:	4603      	mov	r3, r0
 80008d8:	60fb      	str	r3, [r7, #12]
  }
  return distanceCM;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	007a1200 	.word	0x007a1200
 80008e8:	200003d4 	.word	0x200003d4
 80008ec:	49742400 	.word	0x49742400

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b5b0      	push	{r4, r5, r7, lr}
 80008f2:	b09c      	sub	sp, #112	; 0x70
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fcdb 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f871 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 fa39 	bl	8000d74 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000902:	f000 f8a9 	bl	8000a58 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000906:	f000 fa0b 	bl	8000d20 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800090a:	f000 f903 	bl	8000b14 <MX_TIM3_Init>
  MX_TIM4_Init();
 800090e:	f000 f97f 	bl	8000c10 <MX_TIM4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000912:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <main+0xd0>)
 8000914:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000918:	461d      	mov	r5, r3
 800091a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800091c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000926:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f002 fcfa 	bl	8003326 <osThreadCreate>
 8000932:	4603      	mov	r3, r0
 8000934:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <main+0xd4>)
 8000936:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Main */
  osThreadDef(Task_Main, StartTaskMain, osPriorityNormal, 0, 128);
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <main+0xd8>)
 800093a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800093e:	461d      	mov	r5, r3
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_MainHandle = osThreadCreate(osThread(Task_Main), NULL);
 800094c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f002 fce7 	bl	8003326 <osThreadCreate>
 8000958:	4603      	mov	r3, r0
 800095a:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <main+0xdc>)
 800095c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Blink */
  osThreadDef(Task_Blink, StartTaskBlink, osPriorityNormal, 0, 128);
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <main+0xe0>)
 8000960:	f107 041c 	add.w	r4, r7, #28
 8000964:	461d      	mov	r5, r3
 8000966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800096e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_BlinkHandle = osThreadCreate(osThread(Task_Blink), NULL);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fcd4 	bl	8003326 <osThreadCreate>
 800097e:	4603      	mov	r3, r0
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <main+0xe4>)
 8000982:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Motion */
  osThreadDef(Task_Motion, StartTaskMotion, osPriorityNormal, 0, 128);
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <main+0xe8>)
 8000986:	463c      	mov	r4, r7
 8000988:	461d      	mov	r5, r3
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_MotionHandle = osThreadCreate(osThread(Task_Motion), NULL);
 8000996:	463b      	mov	r3, r7
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fcc3 	bl	8003326 <osThreadCreate>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <main+0xec>)
 80009a4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadSuspend(Task_MotionHandle);
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <main+0xec>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fd1b 	bl	80033e6 <osThreadSuspend>
  osThreadSuspend(Task_BlinkHandle);
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <main+0xe4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fd16 	bl	80033e6 <osThreadSuspend>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009ba:	f002 fcad 	bl	8003318 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009be:	e7fe      	b.n	80009be <main+0xce>
 80009c0:	08004a68 	.word	0x08004a68
 80009c4:	20000460 	.word	0x20000460
 80009c8:	08004a84 	.word	0x08004a84
 80009cc:	20000464 	.word	0x20000464
 80009d0:	08004aa0 	.word	0x08004aa0
 80009d4:	20000468 	.word	0x20000468
 80009d8:	08004abc 	.word	0x08004abc
 80009dc:	2000046c 	.word	0x2000046c

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b090      	sub	sp, #64	; 0x40
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	2228      	movs	r2, #40	; 0x28
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 ff50 	bl	8004894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a06:	2301      	movs	r3, #1
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0a:	2310      	movs	r3, #16
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f107 0318 	add.w	r3, r7, #24
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 ff46 	bl	80018a8 <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a22:	f000 fa96 	bl	8000f52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	230f      	movs	r3, #15
 8000a28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 f9b4 	bl	8001dac <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 fa82 	bl	8000f52 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3740      	adds	r7, #64	; 0x40
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000a7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000a84:	2209      	movs	r2, #9
 8000a86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000-1;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000a90:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000a94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aa2:	481b      	ldr	r0, [pc, #108]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000aa4:	f001 fb1a 	bl	80020dc <HAL_TIM_PWM_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000aae:	f000 fa50 	bl	8000f52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4813      	ldr	r0, [pc, #76]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000ac2:	f002 fac7 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000acc:	f000 fa41 	bl	8000f52 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ad0:	2360      	movs	r3, #96	; 0x60
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = MID_POS;
 8000ad4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000aea:	f001 fd8d 	bl	8002608 <HAL_TIM_PWM_ConfigChannel>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000af4:	f000 fa2d 	bl	8000f52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000af8:	2100      	movs	r1, #0
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000afc:	f001 fb3e 	bl	800217c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_TIM2_Init+0xb8>)
 8000b02:	f000 fad1 	bl	80010a8 <HAL_TIM_MspPostInit>

}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	; 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000344 	.word	0x20000344

08000b14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]
 8000b32:	615a      	str	r2, [r3, #20]
 8000b34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */
  //Channel 1 pulse = 12 (15uS pulse width for sensor)
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b36:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000b38:	4a34      	ldr	r2, [pc, #208]	; (8000c0c <MX_TIM3_Init+0xf8>)
 8000b3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8000b3c:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000b3e:	2209      	movs	r2, #9
 8000b40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000-1;
 8000b48:	4b2f      	ldr	r3, [pc, #188]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000b4a:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000b4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b5c:	482a      	ldr	r0, [pc, #168]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000b5e:	f001 fabd 	bl	80020dc <HAL_TIM_PWM_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 f9f3 	bl	8000f52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4823      	ldr	r0, [pc, #140]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000b7c:	f002 fa6a 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b86:	f000 f9e4 	bl	8000f52 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8a:	2360      	movs	r3, #96	; 0x60
 8000b8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 12;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4819      	ldr	r0, [pc, #100]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000ba2:	f001 fd31 	bl	8002608 <HAL_TIM_PWM_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000bac:	f000 f9d1 	bl	8000f52 <Error_Handler>
  }
  sConfigOC.Pulse = NO_SPEED;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2208      	movs	r2, #8
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000bbc:	f001 fd24 	bl	8002608 <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000bc6:	f000 f9c4 	bl	8000f52 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	220c      	movs	r2, #12
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000bd2:	f001 fd19 	bl	8002608 <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8000bdc:	f000 f9b9 	bl	8000f52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //PWM init for Trig pin
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000be0:	2100      	movs	r1, #0
 8000be2:	4809      	ldr	r0, [pc, #36]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000be4:	f001 faca 	bl	800217c <HAL_TIM_PWM_Start>
  //PWM init for left and right motors
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000be8:	2108      	movs	r1, #8
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000bec:	f001 fac6 	bl	800217c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8000bf0:	210c      	movs	r1, #12
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000bf4:	f001 fac2 	bl	800217c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bf8:	4803      	ldr	r0, [pc, #12]	; (8000c08 <MX_TIM3_Init+0xf4>)
 8000bfa:	f000 fa55 	bl	80010a8 <HAL_TIM_MspPostInit>

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000038c 	.word	0x2000038c
 8000c0c:	40000400 	.word	0x40000400

08000c10 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c3c:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000c3e:	4a37      	ldr	r2, [pc, #220]	; (8000d1c <MX_TIM4_Init+0x10c>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000c42:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000c44:	22c7      	movs	r2, #199	; 0xc7
 8000c46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000-1;
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000c50:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c5c:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c62:	482d      	ldr	r0, [pc, #180]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000c64:	f001 fb2c 	bl	80022c0 <HAL_TIM_IC_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000c6e:	f000 f970 	bl	8000f52 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c72:	2304      	movs	r3, #4
 8000c74:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c76:	2350      	movs	r3, #80	; 0x50
 8000c78:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4822      	ldr	r0, [pc, #136]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000c8e:	f001 fd79 	bl	8002784 <HAL_TIM_SlaveConfigSynchro>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 f95b 	bl	8000f52 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4818      	ldr	r0, [pc, #96]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000cb6:	f001 fc13 	bl	80024e0 <HAL_TIM_IC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000cc0:	f000 f947 	bl	8000f52 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4810      	ldr	r0, [pc, #64]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000cd6:	f001 fc03 	bl	80024e0 <HAL_TIM_IC_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000ce0:	f000 f937 	bl	8000f52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000cf2:	f002 f9af 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000cfc:	f000 f929 	bl	8000f52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  //PWM input capture init for Echo pin
  HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_1);
 8000d00:	2100      	movs	r1, #0
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000d04:	f001 fb2c 	bl	8002360 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_2);
 8000d08:	2104      	movs	r1, #4
 8000d0a:	4803      	ldr	r0, [pc, #12]	; (8000d18 <MX_TIM4_Init+0x108>)
 8000d0c:	f001 fb28 	bl	8002360 <HAL_TIM_IC_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	3730      	adds	r7, #48	; 0x30
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200003d4 	.word	0x200003d4
 8000d1c:	40000800 	.word	0x40000800

08000d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MX_USART1_UART_Init+0x50>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d58:	f002 f9da 	bl	8003110 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d62:	f000 f8f6 	bl	8000f52 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000041c 	.word	0x2000041c
 8000d70:	40013800 	.word	0x40013800

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_GPIO_Init+0x9c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a20      	ldr	r2, [pc, #128]	; (8000e10 <MX_GPIO_Init+0x9c>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <MX_GPIO_Init+0x9c>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_GPIO_Init+0x9c>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <MX_GPIO_Init+0x9c>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_GPIO_Init+0x9c>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, leftMotor2_Pin|rightMotor2_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2130      	movs	r1, #48	; 0x30
 8000dbc:	4815      	ldr	r0, [pc, #84]	; (8000e14 <MX_GPIO_Init+0xa0>)
 8000dbe:	f000 fd41 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|leftMotor_Pin|rightMotor_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 8000dc8:	4813      	ldr	r0, [pc, #76]	; (8000e18 <MX_GPIO_Init+0xa4>)
 8000dca:	f000 fd3b 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : leftMotor2_Pin rightMotor2_Pin */
  GPIO_InitStruct.Pin = leftMotor2_Pin|rightMotor2_Pin;
 8000dce:	2330      	movs	r3, #48	; 0x30
 8000dd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4619      	mov	r1, r3
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <MX_GPIO_Init+0xa0>)
 8000de6:	f000 fba9 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin leftMotor_Pin rightMotor_Pin */
  GPIO_InitStruct.Pin = LED_Pin|leftMotor_Pin|rightMotor_Pin;
 8000dea:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8000dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_GPIO_Init+0xa4>)
 8000e04:	f000 fb9a 	bl	800153c <HAL_GPIO_Init>

}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  while(1)
 8000e24:	e7fe      	b.n	8000e24 <StartDefaultTask+0x8>
	...

08000e28 <StartTaskMain>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMain */
void StartTaskMain(void const * argument)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMain */
  /* Infinite loop */
  char appData = '\0';
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
  while(1)
  {
    appData = Bluetooth_Receive();
 8000e34:	f7ff fc22 	bl	800067c <Bluetooth_Receive>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]
    switch(appData)
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2b32      	cmp	r3, #50	; 0x32
 8000e40:	d026      	beq.n	8000e90 <StartTaskMain+0x68>
 8000e42:	2b32      	cmp	r3, #50	; 0x32
 8000e44:	dcf6      	bgt.n	8000e34 <StartTaskMain+0xc>
 8000e46:	2b30      	cmp	r3, #48	; 0x30
 8000e48:	d002      	beq.n	8000e50 <StartTaskMain+0x28>
 8000e4a:	2b31      	cmp	r3, #49	; 0x31
 8000e4c:	d00d      	beq.n	8000e6a <StartTaskMain+0x42>
 8000e4e:	e027      	b.n	8000ea0 <StartTaskMain+0x78>
    {
      case START:
	osThreadResume(Task_MotionHandle);
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <StartTaskMain+0x7c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 fad3 	bl	8003400 <osThreadResume>
	osThreadResume(Task_BlinkHandle);
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <StartTaskMain+0x80>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f002 face 	bl	8003400 <osThreadResume>
	Move_Forward();
 8000e64:	f7ff fc32 	bl	80006cc <Move_Forward>
	break;
 8000e68:	e01a      	b.n	8000ea0 <StartTaskMain+0x78>
      case STOP:
	osThreadSuspend(Task_MotionHandle);
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <StartTaskMain+0x7c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fab9 	bl	80033e6 <osThreadSuspend>
	osThreadSuspend(Task_BlinkHandle);
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <StartTaskMain+0x80>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fab4 	bl	80033e6 <osThreadSuspend>
	HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <StartTaskMain+0x84>)
 8000e86:	f000 fcdd 	bl	8001844 <HAL_GPIO_WritePin>
	Stop();
 8000e8a:	f7ff fcc7 	bl	800081c <Stop>
	break;
 8000e8e:	e007      	b.n	8000ea0 <StartTaskMain+0x78>
      case REVERSE:
	osThreadSuspend(Task_MotionHandle);
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <StartTaskMain+0x7c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 faa6 	bl	80033e6 <osThreadSuspend>
	Reverse();
 8000e9a:	f7ff fc41 	bl	8000720 <Reverse>
	break;
 8000e9e:	bf00      	nop
    appData = Bluetooth_Receive();
 8000ea0:	e7c8      	b.n	8000e34 <StartTaskMain+0xc>
 8000ea2:	bf00      	nop
 8000ea4:	2000046c 	.word	0x2000046c
 8000ea8:	20000468 	.word	0x20000468
 8000eac:	40010c00 	.word	0x40010c00

08000eb0 <StartTaskBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBlink */
void StartTaskBlink(void const * argument)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBlink */
  /* Infinite loop */
  while(1)
  {
    HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8000eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <StartTaskBlink+0x1c>)
 8000ebe:	f000 fcd9 	bl	8001874 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000ec2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec6:	f002 fa7a 	bl	80033be <osDelay>
    HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8000eca:	e7f5      	b.n	8000eb8 <StartTaskBlink+0x8>
 8000ecc:	40010c00 	.word	0x40010c00

08000ed0 <StartTaskMotion>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMotion */
void StartTaskMotion(void const * argument)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMotion */
  /* Infinite loop */
  uint32_t midDistance = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  uint32_t leftDistance = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  uint32_t rightDistance = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  while(1)
  {
    //Handle obstacle avoidance
    Move_Forward();
 8000ee4:	f7ff fbf2 	bl	80006cc <Move_Forward>
    midDistance = Sensor_GetDistance();
 8000ee8:	f7ff fcc0 	bl	800086c <Sensor_GetDistance>
 8000eec:	6178      	str	r0, [r7, #20]
    if(midDistance <= OBSTACLE_DIST)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2b19      	cmp	r3, #25
 8000ef2:	d8f7      	bhi.n	8000ee4 <StartTaskMotion+0x14>
    {
      //Stop momentarily
      Stop();
 8000ef4:	f7ff fc92 	bl	800081c <Stop>
      //check right, measure distance
      Servo_SetPosition(EXTREME_POS1);
 8000ef8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000efc:	f7ff fbd6 	bl	80006ac <Servo_SetPosition>
      osDelay(700);
 8000f00:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f04:	f002 fa5b 	bl	80033be <osDelay>
      rightDistance = Sensor_GetDistance();
 8000f08:	f7ff fcb0 	bl	800086c <Sensor_GetDistance>
 8000f0c:	60f8      	str	r0, [r7, #12]
      //check left, measure distance
      Servo_SetPosition(EXTREME_POS2);
 8000f0e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8000f12:	f7ff fbcb 	bl	80006ac <Servo_SetPosition>
      osDelay(700);
 8000f16:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f1a:	f002 fa50 	bl	80033be <osDelay>
      leftDistance = Sensor_GetDistance();
 8000f1e:	f7ff fca5 	bl	800086c <Sensor_GetDistance>
 8000f22:	6138      	str	r0, [r7, #16]
      //Reverse a bit
      Reverse();
 8000f24:	f7ff fbfc 	bl	8000720 <Reverse>
      osDelay(350);
 8000f28:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000f2c:	f002 fa47 	bl	80033be <osDelay>
      //Follow path that is free
      if(leftDistance > rightDistance)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d902      	bls.n	8000f3e <StartTaskMotion+0x6e>
      {
	Turn_Left();
 8000f38:	f7ff fc46 	bl	80007c8 <Turn_Left>
 8000f3c:	e001      	b.n	8000f42 <StartTaskMotion+0x72>
      }
      else
      {
	Turn_Right();
 8000f3e:	f7ff fc19 	bl	8000774 <Turn_Right>
      }
      Servo_SetPosition(MID_POS);
 8000f42:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f46:	f7ff fbb1 	bl	80006ac <Servo_SetPosition>
      osDelay(250);
 8000f4a:	20fa      	movs	r0, #250	; 0xfa
 8000f4c:	f002 fa37 	bl	80033be <osDelay>
    Move_Forward();
 8000f50:	e7c8      	b.n	8000ee4 <StartTaskMotion+0x14>

08000f52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f56:	b672      	cpsid	i
}
 8000f58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <Error_Handler+0x8>

08000f5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_MspInit+0x68>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_MspInit+0x68>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_MspInit+0x68>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_MspInit+0x68>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <HAL_MspInit+0x68>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <HAL_MspInit+0x68>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	210f      	movs	r1, #15
 8000f96:	f06f 0001 	mvn.w	r0, #1
 8000f9a:	f000 faa6 	bl	80014ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_MspInit+0x6c>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_MspInit+0x6c>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000

08000fcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_TIM_PWM_MspInit+0x58>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_TIM_PWM_MspInit+0x58>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_TIM_PWM_MspInit+0x58>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ff6:	e010      	b.n	800101a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_TIM_PWM_MspInit+0x5c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d10b      	bne.n	800101a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_TIM_PWM_MspInit+0x58>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_TIM_PWM_MspInit+0x58>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_TIM_PWM_MspInit+0x58>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000
 8001028:	40000400 	.word	0x40000400

0800102c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM4)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <HAL_TIM_IC_MspInit+0x70>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d123      	bne.n	8001094 <HAL_TIM_IC_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <HAL_TIM_IC_MspInit+0x74>)
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <HAL_TIM_IC_MspInit+0x74>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	61d3      	str	r3, [r2, #28]
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <HAL_TIM_IC_MspInit+0x74>)
 800105a:	69db      	ldr	r3, [r3, #28]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001064:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_TIM_IC_MspInit+0x74>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <HAL_TIM_IC_MspInit+0x74>)
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <HAL_TIM_IC_MspInit+0x74>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = echo_Pin;
 800107c:	2340      	movs	r3, #64	; 0x40
 800107e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(echo_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <HAL_TIM_IC_MspInit+0x78>)
 8001090:	f000 fa54 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40000800 	.word	0x40000800
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010c00 	.word	0x40010c00

080010a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c6:	d118      	bne.n	80010fa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_TIM_MspPostInit+0xc4>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a27      	ldr	r2, [pc, #156]	; (800116c <HAL_TIM_MspPostInit+0xc4>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b25      	ldr	r3, [pc, #148]	; (800116c <HAL_TIM_MspPostInit+0xc4>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = servo_Pin;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2302      	movs	r3, #2
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4619      	mov	r1, r3
 80010f2:	481f      	ldr	r0, [pc, #124]	; (8001170 <HAL_TIM_MspPostInit+0xc8>)
 80010f4:	f000 fa22 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010f8:	e034      	b.n	8001164 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <HAL_TIM_MspPostInit+0xcc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d12f      	bne.n	8001164 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_TIM_MspPostInit+0xc4>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <HAL_TIM_MspPostInit+0xc4>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_TIM_MspPostInit+0xc4>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <HAL_TIM_MspPostInit+0xc4>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a12      	ldr	r2, [pc, #72]	; (800116c <HAL_TIM_MspPostInit+0xc4>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_TIM_MspPostInit+0xc4>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = trig_Pin;
 8001134:	2340      	movs	r3, #64	; 0x40
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2302      	movs	r3, #2
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(trig_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0318 	add.w	r3, r7, #24
 8001144:	4619      	mov	r1, r3
 8001146:	480a      	ldr	r0, [pc, #40]	; (8001170 <HAL_TIM_MspPostInit+0xc8>)
 8001148:	f000 f9f8 	bl	800153c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = leftPWM_Pin|rightPWM_Pin;
 800114c:	2303      	movs	r3, #3
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2302      	movs	r3, #2
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <HAL_TIM_MspPostInit+0xd0>)
 8001160:	f000 f9ec 	bl	800153c <HAL_GPIO_Init>
}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	40010800 	.word	0x40010800
 8001174:	40000400 	.word	0x40000400
 8001178:	40010c00 	.word	0x40010c00

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <HAL_UART_MspInit+0x8c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d131      	bne.n	8001200 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_UART_MspInit+0x90>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a1a      	ldr	r2, [pc, #104]	; (800120c <HAL_UART_MspInit+0x90>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_UART_MspInit+0x90>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x90>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_UART_MspInit+0x90>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_UART_MspInit+0x90>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <HAL_UART_MspInit+0x94>)
 80011e2:	f000 f9ab 	bl	800153c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = bluetooth_Pin;
 80011e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(bluetooth_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_UART_MspInit+0x94>)
 80011fc:	f000 f99e 	bl	800153c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000
 8001210:	40010800 	.word	0x40010800

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 f87b 	bl	800133c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001246:	f003 f82f 	bl	80042a8 <xTaskGetSchedulerState>
 800124a:	4603      	mov	r3, r0
 800124c:	2b01      	cmp	r3, #1
 800124e:	d001      	beq.n	8001254 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001250:	f003 fa1a 	bl	8004688 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800128a:	f7ff ffe5 	bl	8001258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128e:	f003 fadb 	bl	8004848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001292:	f7ff fb2d 	bl	80008f0 <main>
  bx lr
 8001296:	4770      	bx	lr
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012a0:	08004b70 	.word	0x08004b70
  ldr r2, =_sbss
 80012a4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012a8:	200011b8 	.word	0x200011b8

080012ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x28>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x28>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f907 	bl	80014d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	200f      	movs	r0, #15
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fe46 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40022000 	.word	0x40022000

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f911 	bl	8001522 <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 f8e7 	bl	80014ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20000008 	.word	0x20000008
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_IncTick+0x1c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_IncTick+0x20>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_IncTick+0x20>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	20000008 	.word	0x20000008
 800135c:	20000470 	.word	0x20000470

08001360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b02      	ldr	r3, [pc, #8]	; (8001370 <HAL_GetTick+0x10>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	20000470 	.word	0x20000470

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a0:	d301      	bcc.n	80014a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <SysTick_Config+0x40>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ae:	210f      	movs	r1, #15
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f7ff ff90 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <SysTick_Config+0x40>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <SysTick_Config+0x40>)
 80014c0:	2207      	movs	r2, #7
 80014c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	e000e010 	.word	0xe000e010

080014d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff49 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff5e 	bl	80013bc <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff90 	bl	800142c <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5f 	bl	80013d8 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffb0 	bl	8001490 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b08b      	sub	sp, #44	; 0x2c
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154e:	e169      	b.n	8001824 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001550:	2201      	movs	r2, #1
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	429a      	cmp	r2, r3
 800156a:	f040 8158 	bne.w	800181e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a9a      	ldr	r2, [pc, #616]	; (80017dc <HAL_GPIO_Init+0x2a0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d05e      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001578:	4a98      	ldr	r2, [pc, #608]	; (80017dc <HAL_GPIO_Init+0x2a0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d875      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 800157e:	4a98      	ldr	r2, [pc, #608]	; (80017e0 <HAL_GPIO_Init+0x2a4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d058      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001584:	4a96      	ldr	r2, [pc, #600]	; (80017e0 <HAL_GPIO_Init+0x2a4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d86f      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 800158a:	4a96      	ldr	r2, [pc, #600]	; (80017e4 <HAL_GPIO_Init+0x2a8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d052      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001590:	4a94      	ldr	r2, [pc, #592]	; (80017e4 <HAL_GPIO_Init+0x2a8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d869      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 8001596:	4a94      	ldr	r2, [pc, #592]	; (80017e8 <HAL_GPIO_Init+0x2ac>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d04c      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 800159c:	4a92      	ldr	r2, [pc, #584]	; (80017e8 <HAL_GPIO_Init+0x2ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d863      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015a2:	4a92      	ldr	r2, [pc, #584]	; (80017ec <HAL_GPIO_Init+0x2b0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d046      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 80015a8:	4a90      	ldr	r2, [pc, #576]	; (80017ec <HAL_GPIO_Init+0x2b0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d85d      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d82a      	bhi.n	8001608 <HAL_GPIO_Init+0xcc>
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d859      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <HAL_GPIO_Init+0x80>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	08001637 	.word	0x08001637
 80015c0:	08001611 	.word	0x08001611
 80015c4:	08001623 	.word	0x08001623
 80015c8:	08001665 	.word	0x08001665
 80015cc:	0800166b 	.word	0x0800166b
 80015d0:	0800166b 	.word	0x0800166b
 80015d4:	0800166b 	.word	0x0800166b
 80015d8:	0800166b 	.word	0x0800166b
 80015dc:	0800166b 	.word	0x0800166b
 80015e0:	0800166b 	.word	0x0800166b
 80015e4:	0800166b 	.word	0x0800166b
 80015e8:	0800166b 	.word	0x0800166b
 80015ec:	0800166b 	.word	0x0800166b
 80015f0:	0800166b 	.word	0x0800166b
 80015f4:	0800166b 	.word	0x0800166b
 80015f8:	0800166b 	.word	0x0800166b
 80015fc:	0800166b 	.word	0x0800166b
 8001600:	08001619 	.word	0x08001619
 8001604:	0800162d 	.word	0x0800162d
 8001608:	4a79      	ldr	r2, [pc, #484]	; (80017f0 <HAL_GPIO_Init+0x2b4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800160e:	e02c      	b.n	800166a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	623b      	str	r3, [r7, #32]
          break;
 8001616:	e029      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	3304      	adds	r3, #4
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e024      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	3308      	adds	r3, #8
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e01f      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	330c      	adds	r3, #12
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e01a      	b.n	800166c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800163e:	2304      	movs	r3, #4
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e013      	b.n	800166c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	611a      	str	r2, [r3, #16]
          break;
 8001656:	e009      	b.n	800166c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001658:	2308      	movs	r3, #8
 800165a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	615a      	str	r2, [r3, #20]
          break;
 8001662:	e003      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	e000      	b.n	800166c <HAL_GPIO_Init+0x130>
          break;
 800166a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2bff      	cmp	r3, #255	; 0xff
 8001670:	d801      	bhi.n	8001676 <HAL_GPIO_Init+0x13a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	e001      	b.n	800167a <HAL_GPIO_Init+0x13e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3304      	adds	r3, #4
 800167a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2bff      	cmp	r3, #255	; 0xff
 8001680:	d802      	bhi.n	8001688 <HAL_GPIO_Init+0x14c>
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	e002      	b.n	800168e <HAL_GPIO_Init+0x152>
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	3b08      	subs	r3, #8
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	210f      	movs	r1, #15
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	6a39      	ldr	r1, [r7, #32]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	431a      	orrs	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80b1 	beq.w	800181e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016bc:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b4a      	ldr	r3, [pc, #296]	; (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d4:	4a48      	ldr	r2, [pc, #288]	; (80017f8 <HAL_GPIO_Init+0x2bc>)
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a40      	ldr	r2, [pc, #256]	; (80017fc <HAL_GPIO_Init+0x2c0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d013      	beq.n	8001728 <HAL_GPIO_Init+0x1ec>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a3f      	ldr	r2, [pc, #252]	; (8001800 <HAL_GPIO_Init+0x2c4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d00d      	beq.n	8001724 <HAL_GPIO_Init+0x1e8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3e      	ldr	r2, [pc, #248]	; (8001804 <HAL_GPIO_Init+0x2c8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d007      	beq.n	8001720 <HAL_GPIO_Init+0x1e4>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3d      	ldr	r2, [pc, #244]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_GPIO_Init+0x1e0>
 8001718:	2303      	movs	r3, #3
 800171a:	e006      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 800171c:	2304      	movs	r3, #4
 800171e:	e004      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001720:	2302      	movs	r3, #2
 8001722:	e002      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001728:	2300      	movs	r3, #0
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172c:	f002 0203 	and.w	r2, r2, #3
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	4093      	lsls	r3, r2
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800173a:	492f      	ldr	r1, [pc, #188]	; (80017f8 <HAL_GPIO_Init+0x2bc>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	492c      	ldr	r1, [pc, #176]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	4928      	ldr	r1, [pc, #160]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4922      	ldr	r1, [pc, #136]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	43db      	mvns	r3, r3
 8001792:	491e      	ldr	r1, [pc, #120]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001794:	4013      	ands	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	4918      	ldr	r1, [pc, #96]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4914      	ldr	r1, [pc, #80]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017bc:	4013      	ands	r3, r2
 80017be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d021      	beq.n	8001810 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60cb      	str	r3, [r1, #12]
 80017d8:	e021      	b.n	800181e <HAL_GPIO_Init+0x2e2>
 80017da:	bf00      	nop
 80017dc:	10320000 	.word	0x10320000
 80017e0:	10310000 	.word	0x10310000
 80017e4:	10220000 	.word	0x10220000
 80017e8:	10210000 	.word	0x10210000
 80017ec:	10120000 	.word	0x10120000
 80017f0:	10110000 	.word	0x10110000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	40010800 	.word	0x40010800
 8001800:	40010c00 	.word	0x40010c00
 8001804:	40011000 	.word	0x40011000
 8001808:	40011400 	.word	0x40011400
 800180c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_GPIO_Init+0x304>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	43db      	mvns	r3, r3
 8001818:	4909      	ldr	r1, [pc, #36]	; (8001840 <HAL_GPIO_Init+0x304>)
 800181a:	4013      	ands	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	3301      	adds	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	f47f ae8e 	bne.w	8001550 <HAL_GPIO_Init+0x14>
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	372c      	adds	r7, #44	; 0x2c
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40010400 	.word	0x40010400

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001860:	e003      	b.n	800186a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	611a      	str	r2, [r3, #16]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	041a      	lsls	r2, r3, #16
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43d9      	mvns	r1, r3
 8001892:	887b      	ldrh	r3, [r7, #2]
 8001894:	400b      	ands	r3, r1
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	611a      	str	r2, [r3, #16]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e272      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8087 	beq.w	80019d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c8:	4b92      	ldr	r3, [pc, #584]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d00c      	beq.n	80018ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018d4:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d112      	bne.n	8001906 <HAL_RCC_OscConfig+0x5e>
 80018e0:	4b8c      	ldr	r3, [pc, #560]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d10b      	bne.n	8001906 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ee:	4b89      	ldr	r3, [pc, #548]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d06c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x12c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d168      	bne.n	80019d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e24c      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x76>
 8001910:	4b80      	ldr	r3, [pc, #512]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a7f      	ldr	r2, [pc, #508]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e02e      	b.n	800197c <HAL_RCC_OscConfig+0xd4>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x98>
 8001926:	4b7b      	ldr	r3, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7a      	ldr	r2, [pc, #488]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b78      	ldr	r3, [pc, #480]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a77      	ldr	r2, [pc, #476]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0xd4>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0xbc>
 800194a:	4b72      	ldr	r3, [pc, #456]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a71      	ldr	r2, [pc, #452]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b6f      	ldr	r3, [pc, #444]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a6e      	ldr	r2, [pc, #440]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0xd4>
 8001964:	4b6b      	ldr	r3, [pc, #428]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a6a      	ldr	r2, [pc, #424]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b68      	ldr	r3, [pc, #416]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a67      	ldr	r2, [pc, #412]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fcec 	bl	8001360 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fce8 	bl	8001360 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e200      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0xe4>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fcd8 	bl	8001360 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fcd4 	bl	8001360 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e1ec      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x10c>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019e2:	4b4c      	ldr	r3, [pc, #304]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ee:	4b49      	ldr	r3, [pc, #292]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d11c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x18c>
 80019fa:	4b46      	ldr	r3, [pc, #280]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d116      	bne.n	8001a34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	4b43      	ldr	r3, [pc, #268]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_RCC_OscConfig+0x176>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e1c0      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1e:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4939      	ldr	r1, [pc, #228]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	e03a      	b.n	8001aaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3c:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fc8d 	bl	8001360 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fc89 	bl	8001360 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1a1      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a68:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4927      	ldr	r1, [pc, #156]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
 8001a7c:	e015      	b.n	8001aaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7e:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <HAL_RCC_OscConfig+0x270>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fc6c 	bl	8001360 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fc68 	bl	8001360 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e180      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d03a      	beq.n	8001b2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d019      	beq.n	8001af2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_RCC_OscConfig+0x274>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fc4c 	bl	8001360 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff fc48 	bl	8001360 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e160      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aea:	2001      	movs	r0, #1
 8001aec:	f000 fad8 	bl	80020a0 <RCC_Delay>
 8001af0:	e01c      	b.n	8001b2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_OscConfig+0x274>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7ff fc32 	bl	8001360 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afe:	e00f      	b.n	8001b20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff fc2e 	bl	8001360 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d908      	bls.n	8001b20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e146      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	42420000 	.word	0x42420000
 8001b1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b20:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e9      	bne.n	8001b00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80a6 	beq.w	8001c86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b3e:	4b8b      	ldr	r3, [pc, #556]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10d      	bne.n	8001b66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	4a87      	ldr	r2, [pc, #540]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b54:	61d3      	str	r3, [r2, #28]
 8001b56:	4b85      	ldr	r3, [pc, #532]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b62:	2301      	movs	r3, #1
 8001b64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b66:	4b82      	ldr	r3, [pc, #520]	; (8001d70 <HAL_RCC_OscConfig+0x4c8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d118      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b72:	4b7f      	ldr	r3, [pc, #508]	; (8001d70 <HAL_RCC_OscConfig+0x4c8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7e      	ldr	r2, [pc, #504]	; (8001d70 <HAL_RCC_OscConfig+0x4c8>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fbef 	bl	8001360 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b86:	f7ff fbeb 	bl	8001360 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b64      	cmp	r3, #100	; 0x64
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e103      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	4b75      	ldr	r3, [pc, #468]	; (8001d70 <HAL_RCC_OscConfig+0x4c8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x312>
 8001bac:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a6e      	ldr	r2, [pc, #440]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	e02d      	b.n	8001c16 <HAL_RCC_OscConfig+0x36e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x334>
 8001bc2:	4b6a      	ldr	r3, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a69      	ldr	r2, [pc, #420]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	6213      	str	r3, [r2, #32]
 8001bce:	4b67      	ldr	r3, [pc, #412]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a66      	ldr	r2, [pc, #408]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 0304 	bic.w	r3, r3, #4
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	e01c      	b.n	8001c16 <HAL_RCC_OscConfig+0x36e>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d10c      	bne.n	8001bfe <HAL_RCC_OscConfig+0x356>
 8001be4:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4a60      	ldr	r2, [pc, #384]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6213      	str	r3, [r2, #32]
 8001bf0:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a5d      	ldr	r2, [pc, #372]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	e00b      	b.n	8001c16 <HAL_RCC_OscConfig+0x36e>
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a5a      	ldr	r2, [pc, #360]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6213      	str	r3, [r2, #32]
 8001c0a:	4b58      	ldr	r3, [pc, #352]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a57      	ldr	r2, [pc, #348]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	f023 0304 	bic.w	r3, r3, #4
 8001c14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d015      	beq.n	8001c4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fb9f 	bl	8001360 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff fb9b 	bl	8001360 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0b1      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3c:	4b4b      	ldr	r3, [pc, #300]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ee      	beq.n	8001c26 <HAL_RCC_OscConfig+0x37e>
 8001c48:	e014      	b.n	8001c74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fb89 	bl	8001360 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff fb85 	bl	8001360 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e09b      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c68:	4b40      	ldr	r3, [pc, #256]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ee      	bne.n	8001c52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d105      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a3b      	ldr	r2, [pc, #236]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8087 	beq.w	8001d9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c90:	4b36      	ldr	r3, [pc, #216]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d061      	beq.n	8001d60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d146      	bne.n	8001d32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca4:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fb59 	bl	8001360 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7ff fb55 	bl	8001360 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e06d      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc4:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd8:	d108      	bne.n	8001cec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	4921      	ldr	r1, [pc, #132]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a19      	ldr	r1, [r3, #32]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	491b      	ldr	r1, [pc, #108]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0a:	f7ff fb29 	bl	8001360 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff fb25 	bl	8001360 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e03d      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x46a>
 8001d30:	e035      	b.n	8001d9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_RCC_OscConfig+0x4cc>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff fb12 	bl	8001360 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fb0e 	bl	8001360 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e026      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x498>
 8001d5e:	e01e      	b.n	8001d9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e019      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40007000 	.word	0x40007000
 8001d74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_OscConfig+0x500>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e000      	b.n	8001da0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000

08001dac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0d0      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc0:	4b6a      	ldr	r3, [pc, #424]	; (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d910      	bls.n	8001df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dce:	4b67      	ldr	r3, [pc, #412]	; (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 0207 	bic.w	r2, r3, #7
 8001dd6:	4965      	ldr	r1, [pc, #404]	; (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b63      	ldr	r3, [pc, #396]	; (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0b8      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e08:	4b59      	ldr	r3, [pc, #356]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e20:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a52      	ldr	r2, [pc, #328]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2c:	4b50      	ldr	r3, [pc, #320]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	494d      	ldr	r1, [pc, #308]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d040      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d115      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e07f      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6a:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e073      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e06b      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e8a:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f023 0203 	bic.w	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4936      	ldr	r1, [pc, #216]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e9c:	f7ff fa60 	bl	8001360 <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff fa5c 	bl	8001360 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e053      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 020c 	and.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d1eb      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d210      	bcs.n	8001efc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 0207 	bic.w	r2, r3, #7
 8001ee2:	4922      	ldr	r1, [pc, #136]	; (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e032      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4916      	ldr	r1, [pc, #88]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	490e      	ldr	r1, [pc, #56]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f3a:	f000 f821 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	490a      	ldr	r1, [pc, #40]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	5ccb      	ldrb	r3, [r1, r3]
 8001f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f52:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <HAL_RCC_ClockConfig+0x1cc>)
 8001f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_RCC_ClockConfig+0x1d0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f9be 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	40021000 	.word	0x40021000
 8001f74:	08004af0 	.word	0x08004af0
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f80:	b490      	push	{r4, r7}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f86:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_RCC_GetSysClockFreq+0xac>)
 8001f88:	1d3c      	adds	r4, r7, #4
 8001f8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f90:	f240 2301 	movw	r3, #513	; 0x201
 8001f94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d002      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d003      	beq.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x46>
 8001fbe:	e02b      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fc2:	623b      	str	r3, [r7, #32]
      break;
 8001fc4:	e02b      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	0c9b      	lsrs	r3, r3, #18
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	3328      	adds	r3, #40	; 0x28
 8001fd0:	443b      	add	r3, r7
 8001fd2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fd6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d012      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	0c5b      	lsrs	r3, r3, #17
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	3328      	adds	r3, #40	; 0x28
 8001fee:	443b      	add	r3, r7
 8001ff0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ff4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ffa:	fb03 f202 	mul.w	r2, r3, r2
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	e004      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	623b      	str	r3, [r7, #32]
      break;
 8002016:	e002      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_RCC_GetSysClockFreq+0xb4>)
 800201a:	623b      	str	r3, [r7, #32]
      break;
 800201c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800201e:	6a3b      	ldr	r3, [r7, #32]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3728      	adds	r7, #40	; 0x28
 8002024:	46bd      	mov	sp, r7
 8002026:	bc90      	pop	{r4, r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	08004ad8 	.word	0x08004ad8
 8002030:	40021000 	.word	0x40021000
 8002034:	007a1200 	.word	0x007a1200
 8002038:	003d0900 	.word	0x003d0900

0800203c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002040:	4b02      	ldr	r3, [pc, #8]	; (800204c <HAL_RCC_GetHCLKFreq+0x10>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	20000000 	.word	0x20000000

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002054:	f7ff fff2 	bl	800203c <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4903      	ldr	r1, [pc, #12]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	08004b00 	.word	0x08004b00

08002078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800207c:	f7ff ffde 	bl	800203c <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0adb      	lsrs	r3, r3, #11
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4903      	ldr	r1, [pc, #12]	; (800209c <HAL_RCC_GetPCLK2Freq+0x24>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	08004b00 	.word	0x08004b00

080020a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <RCC_Delay+0x34>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <RCC_Delay+0x38>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0a5b      	lsrs	r3, r3, #9
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020bc:	bf00      	nop
  }
  while (Delay --);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1e5a      	subs	r2, r3, #1
 80020c2:	60fa      	str	r2, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f9      	bne.n	80020bc <RCC_Delay+0x1c>
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	20000000 	.word	0x20000000
 80020d8:	10624dd3 	.word	0x10624dd3

080020dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e041      	b.n	8002172 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe ff62 	bl	8000fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f000 fb74 	bl	8002808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_TIM_PWM_Start+0x24>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	e022      	b.n	80021e6 <HAL_TIM_PWM_Start+0x6a>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d109      	bne.n	80021ba <HAL_TIM_PWM_Start+0x3e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	e015      	b.n	80021e6 <HAL_TIM_PWM_Start+0x6a>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d109      	bne.n	80021d4 <HAL_TIM_PWM_Start+0x58>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e008      	b.n	80021e6 <HAL_TIM_PWM_Start+0x6a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e05e      	b.n	80022ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <HAL_TIM_PWM_Start+0x82>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021fc:	e013      	b.n	8002226 <HAL_TIM_PWM_Start+0xaa>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d104      	bne.n	800220e <HAL_TIM_PWM_Start+0x92>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800220c:	e00b      	b.n	8002226 <HAL_TIM_PWM_Start+0xaa>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	2b08      	cmp	r3, #8
 8002212:	d104      	bne.n	800221e <HAL_TIM_PWM_Start+0xa2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800221c:	e003      	b.n	8002226 <HAL_TIM_PWM_Start+0xaa>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2202      	movs	r2, #2
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2201      	movs	r2, #1
 800222c:	6839      	ldr	r1, [r7, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f000 feeb 	bl	800300a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_TIM_PWM_Start+0x138>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d107      	bne.n	800224e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_TIM_PWM_Start+0x138>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00e      	beq.n	8002276 <HAL_TIM_PWM_Start+0xfa>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002260:	d009      	beq.n	8002276 <HAL_TIM_PWM_Start+0xfa>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <HAL_TIM_PWM_Start+0x13c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_TIM_PWM_Start+0xfa>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a12      	ldr	r2, [pc, #72]	; (80022bc <HAL_TIM_PWM_Start+0x140>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d111      	bne.n	800229a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d010      	beq.n	80022aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002298:	e007      	b.n	80022aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40000400 	.word	0x40000400
 80022bc:	40000800 	.word	0x40000800

080022c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e041      	b.n	8002356 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fea0 	bl	800102c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3304      	adds	r3, #4
 80022fc:	4619      	mov	r1, r3
 80022fe:	4610      	mov	r0, r2
 8002300:	f000 fa82 	bl	8002808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d104      	bne.n	800237a <HAL_TIM_IC_Start+0x1a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002376:	b2db      	uxtb	r3, r3
 8002378:	e013      	b.n	80023a2 <HAL_TIM_IC_Start+0x42>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d104      	bne.n	800238a <HAL_TIM_IC_Start+0x2a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002386:	b2db      	uxtb	r3, r3
 8002388:	e00b      	b.n	80023a2 <HAL_TIM_IC_Start+0x42>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d104      	bne.n	800239a <HAL_TIM_IC_Start+0x3a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002396:	b2db      	uxtb	r3, r3
 8002398:	e003      	b.n	80023a2 <HAL_TIM_IC_Start+0x42>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <HAL_TIM_IC_Start+0x54>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e013      	b.n	80023dc <HAL_TIM_IC_Start+0x7c>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d104      	bne.n	80023c4 <HAL_TIM_IC_Start+0x64>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e00b      	b.n	80023dc <HAL_TIM_IC_Start+0x7c>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d104      	bne.n	80023d4 <HAL_TIM_IC_Start+0x74>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e003      	b.n	80023dc <HAL_TIM_IC_Start+0x7c>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d102      	bne.n	80023ea <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80023e4:	7bbb      	ldrb	r3, [r7, #14]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06d      	b.n	80024ca <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d104      	bne.n	80023fe <HAL_TIM_IC_Start+0x9e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023fc:	e013      	b.n	8002426 <HAL_TIM_IC_Start+0xc6>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d104      	bne.n	800240e <HAL_TIM_IC_Start+0xae>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800240c:	e00b      	b.n	8002426 <HAL_TIM_IC_Start+0xc6>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d104      	bne.n	800241e <HAL_TIM_IC_Start+0xbe>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800241c:	e003      	b.n	8002426 <HAL_TIM_IC_Start+0xc6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <HAL_TIM_IC_Start+0xd6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002434:	e013      	b.n	800245e <HAL_TIM_IC_Start+0xfe>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b04      	cmp	r3, #4
 800243a:	d104      	bne.n	8002446 <HAL_TIM_IC_Start+0xe6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002444:	e00b      	b.n	800245e <HAL_TIM_IC_Start+0xfe>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b08      	cmp	r3, #8
 800244a:	d104      	bne.n	8002456 <HAL_TIM_IC_Start+0xf6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002454:	e003      	b.n	800245e <HAL_TIM_IC_Start+0xfe>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2201      	movs	r2, #1
 8002464:	6839      	ldr	r1, [r7, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fdcf 	bl	800300a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a18      	ldr	r2, [pc, #96]	; (80024d4 <HAL_TIM_IC_Start+0x174>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00e      	beq.n	8002494 <HAL_TIM_IC_Start+0x134>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247e:	d009      	beq.n	8002494 <HAL_TIM_IC_Start+0x134>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_TIM_IC_Start+0x178>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d004      	beq.n	8002494 <HAL_TIM_IC_Start+0x134>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <HAL_TIM_IC_Start+0x17c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d111      	bne.n	80024b8 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b06      	cmp	r3, #6
 80024a4:	d010      	beq.n	80024c8 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b6:	e007      	b.n	80024c8 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800

080024e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_TIM_IC_ConfigChannel+0x1a>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e082      	b.n	8002600 <HAL_TIM_IC_ConfigChannel+0x120>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d11b      	bne.n	8002540 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f000 fbee 	bl	8002cf8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 020c 	bic.w	r2, r2, #12
 800252a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6999      	ldr	r1, [r3, #24]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	619a      	str	r2, [r3, #24]
 800253e:	e05a      	b.n	80025f6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b04      	cmp	r3, #4
 8002544:	d11c      	bne.n	8002580 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	6819      	ldr	r1, [r3, #0]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f000 fc57 	bl	8002e08 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699a      	ldr	r2, [r3, #24]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002568:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6999      	ldr	r1, [r3, #24]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	021a      	lsls	r2, r3, #8
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	619a      	str	r2, [r3, #24]
 800257e:	e03a      	b.n	80025f6 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b08      	cmp	r3, #8
 8002584:	d11b      	bne.n	80025be <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	6819      	ldr	r1, [r3, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f000 fca2 	bl	8002ede <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69da      	ldr	r2, [r3, #28]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 020c 	bic.w	r2, r2, #12
 80025a8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69d9      	ldr	r1, [r3, #28]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	61da      	str	r2, [r3, #28]
 80025bc:	e01b      	b.n	80025f6 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f000 fcc1 	bl	8002f54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69d9      	ldr	r1, [r3, #28]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	021a      	lsls	r2, r3, #8
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800261e:	2302      	movs	r3, #2
 8002620:	e0ac      	b.n	800277c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	f200 809f 	bhi.w	8002770 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002632:	a201      	add	r2, pc, #4	; (adr r2, 8002638 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002638:	0800266d 	.word	0x0800266d
 800263c:	08002771 	.word	0x08002771
 8002640:	08002771 	.word	0x08002771
 8002644:	08002771 	.word	0x08002771
 8002648:	080026ad 	.word	0x080026ad
 800264c:	08002771 	.word	0x08002771
 8002650:	08002771 	.word	0x08002771
 8002654:	08002771 	.word	0x08002771
 8002658:	080026ef 	.word	0x080026ef
 800265c:	08002771 	.word	0x08002771
 8002660:	08002771 	.word	0x08002771
 8002664:	08002771 	.word	0x08002771
 8002668:	0800272f 	.word	0x0800272f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f92a 	bl	80028cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0208 	orr.w	r2, r2, #8
 8002686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699a      	ldr	r2, [r3, #24]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0204 	bic.w	r2, r2, #4
 8002696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6999      	ldr	r1, [r3, #24]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	619a      	str	r2, [r3, #24]
      break;
 80026aa:	e062      	b.n	8002772 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f970 	bl	8002998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6999      	ldr	r1, [r3, #24]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	021a      	lsls	r2, r3, #8
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	619a      	str	r2, [r3, #24]
      break;
 80026ec:	e041      	b.n	8002772 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f9b9 	bl	8002a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0208 	orr.w	r2, r2, #8
 8002708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0204 	bic.w	r2, r2, #4
 8002718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69d9      	ldr	r1, [r3, #28]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	61da      	str	r2, [r3, #28]
      break;
 800272c:	e021      	b.n	8002772 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fa03 	bl	8002b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69da      	ldr	r2, [r3, #28]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	69d9      	ldr	r1, [r3, #28]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	021a      	lsls	r2, r3, #8
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	61da      	str	r2, [r3, #28]
      break;
 800276e:	e000      	b.n	8002772 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_TIM_SlaveConfigSynchro+0x18>
 8002798:	2302      	movs	r3, #2
 800279a:	e031      	b.n	8002800 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa14 	bl	8002bdc <TIM_SlaveTimer_SetConfig>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e018      	b.n	8002800 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027dc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027ec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a29      	ldr	r2, [pc, #164]	; (80028c0 <TIM_Base_SetConfig+0xb8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00b      	beq.n	8002838 <TIM_Base_SetConfig+0x30>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002826:	d007      	beq.n	8002838 <TIM_Base_SetConfig+0x30>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a26      	ldr	r2, [pc, #152]	; (80028c4 <TIM_Base_SetConfig+0xbc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_Base_SetConfig+0x30>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <TIM_Base_SetConfig+0xc0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d108      	bne.n	800284a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a1c      	ldr	r2, [pc, #112]	; (80028c0 <TIM_Base_SetConfig+0xb8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00b      	beq.n	800286a <TIM_Base_SetConfig+0x62>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0x62>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <TIM_Base_SetConfig+0xbc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0x62>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <TIM_Base_SetConfig+0xc0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d108      	bne.n	800287c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a07      	ldr	r2, [pc, #28]	; (80028c0 <TIM_Base_SetConfig+0xb8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d103      	bne.n	80028b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	615a      	str	r2, [r3, #20]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800

080028cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0201 	bic.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0303 	bic.w	r3, r3, #3
 8002902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f023 0302 	bic.w	r3, r3, #2
 8002914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <TIM_OC1_SetConfig+0xc8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d10c      	bne.n	8002942 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f023 0308 	bic.w	r3, r3, #8
 800292e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a13      	ldr	r2, [pc, #76]	; (8002994 <TIM_OC1_SetConfig+0xc8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d111      	bne.n	800296e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	621a      	str	r2, [r3, #32]
}
 8002988:	bf00      	nop
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40012c00 	.word	0x40012c00

08002998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f023 0210 	bic.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0320 	bic.w	r3, r3, #32
 80029e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <TIM_OC2_SetConfig+0xd0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10d      	bne.n	8002a14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <TIM_OC2_SetConfig+0xd0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d113      	bne.n	8002a44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	621a      	str	r2, [r3, #32]
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	40012c00 	.word	0x40012c00

08002a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	021b      	lsls	r3, r3, #8
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <TIM_OC3_SetConfig+0xd0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10d      	bne.n	8002ae6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <TIM_OC3_SetConfig+0xd0>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d113      	bne.n	8002b16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	621a      	str	r2, [r3, #32]
}
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40012c00 	.word	0x40012c00

08002b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	031b      	lsls	r3, r3, #12
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <TIM_OC4_SetConfig+0x98>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d109      	bne.n	8002bb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	019b      	lsls	r3, r3, #6
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	621a      	str	r2, [r3, #32]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr
 8002bd8:	40012c00 	.word	0x40012c00

08002bdc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 0307 	bic.w	r3, r3, #7
 8002c06:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b70      	cmp	r3, #112	; 0x70
 8002c20:	d01a      	beq.n	8002c58 <TIM_SlaveTimer_SetConfig+0x7c>
 8002c22:	2b70      	cmp	r3, #112	; 0x70
 8002c24:	d860      	bhi.n	8002ce8 <TIM_SlaveTimer_SetConfig+0x10c>
 8002c26:	2b60      	cmp	r3, #96	; 0x60
 8002c28:	d054      	beq.n	8002cd4 <TIM_SlaveTimer_SetConfig+0xf8>
 8002c2a:	2b60      	cmp	r3, #96	; 0x60
 8002c2c:	d85c      	bhi.n	8002ce8 <TIM_SlaveTimer_SetConfig+0x10c>
 8002c2e:	2b50      	cmp	r3, #80	; 0x50
 8002c30:	d046      	beq.n	8002cc0 <TIM_SlaveTimer_SetConfig+0xe4>
 8002c32:	2b50      	cmp	r3, #80	; 0x50
 8002c34:	d858      	bhi.n	8002ce8 <TIM_SlaveTimer_SetConfig+0x10c>
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d019      	beq.n	8002c6e <TIM_SlaveTimer_SetConfig+0x92>
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d854      	bhi.n	8002ce8 <TIM_SlaveTimer_SetConfig+0x10c>
 8002c3e:	2b30      	cmp	r3, #48	; 0x30
 8002c40:	d054      	beq.n	8002cec <TIM_SlaveTimer_SetConfig+0x110>
 8002c42:	2b30      	cmp	r3, #48	; 0x30
 8002c44:	d850      	bhi.n	8002ce8 <TIM_SlaveTimer_SetConfig+0x10c>
 8002c46:	2b20      	cmp	r3, #32
 8002c48:	d050      	beq.n	8002cec <TIM_SlaveTimer_SetConfig+0x110>
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d84c      	bhi.n	8002ce8 <TIM_SlaveTimer_SetConfig+0x10c>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d04c      	beq.n	8002cec <TIM_SlaveTimer_SetConfig+0x110>
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d04a      	beq.n	8002cec <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002c56:	e047      	b.n	8002ce8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68d9      	ldr	r1, [r3, #12]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f000 f9b0 	bl	8002fcc <TIM_ETR_SetConfig>
      break;
 8002c6c:	e03f      	b.n	8002cee <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d101      	bne.n	8002c7a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e03a      	b.n	8002cf0 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	621a      	str	r2, [r3, #32]
      break;
 8002cbe:	e016      	b.n	8002cee <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f000 f86d 	bl	8002dac <TIM_TI1_ConfigInputStage>
      break;
 8002cd2:	e00c      	b.n	8002cee <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6899      	ldr	r1, [r3, #8]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f000 f8cd 	bl	8002e80 <TIM_TI2_ConfigInputStage>
      break;
 8002ce6:	e002      	b.n	8002cee <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8002ce8:	bf00      	nop
 8002cea:	e000      	b.n	8002cee <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8002cec:	bf00      	nop
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f023 0201 	bic.w	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <TIM_TI1_SetConfig+0xa8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00b      	beq.n	8002d3e <TIM_TI1_SetConfig+0x46>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d2c:	d007      	beq.n	8002d3e <TIM_TI1_SetConfig+0x46>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <TIM_TI1_SetConfig+0xac>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d003      	beq.n	8002d3e <TIM_TI1_SetConfig+0x46>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <TIM_TI1_SetConfig+0xb0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d101      	bne.n	8002d42 <TIM_TI1_SetConfig+0x4a>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <TIM_TI1_SetConfig+0x4c>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e003      	b.n	8002d62 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f023 030a 	bic.w	r3, r3, #10
 8002d7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f003 030a 	and.w	r3, r3, #10
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800

08002dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0201 	bic.w	r2, r3, #1
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f023 030a 	bic.w	r3, r3, #10
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0210 	bic.w	r2, r3, #16
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	031b      	lsls	r3, r3, #12
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f023 0210 	bic.w	r2, r3, #16
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	031b      	lsls	r3, r3, #12
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ebc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	621a      	str	r2, [r3, #32]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b087      	sub	sp, #28
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0303 	bic.w	r3, r3, #3
 8002f0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f1a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	621a      	str	r2, [r3, #32]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	021b      	lsls	r3, r3, #8
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	031b      	lsls	r3, r3, #12
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	031b      	lsls	r3, r3, #12
 8002fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	021a      	lsls	r2, r3, #8
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	609a      	str	r2, [r3, #8]
}
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800300a:	b480      	push	{r7}
 800300c:	b087      	sub	sp, #28
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	2201      	movs	r2, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	43db      	mvns	r3, r3
 800302c:	401a      	ands	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a1a      	ldr	r2, [r3, #32]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	431a      	orrs	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	621a      	str	r2, [r3, #32]
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr
	...

08003054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003068:	2302      	movs	r3, #2
 800306a:	e046      	b.n	80030fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b8:	d009      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a12      	ldr	r2, [pc, #72]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d10c      	bne.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800

08003110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e03f      	b.n	80031a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe f820 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	; 0x24
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f829 	bl	80031ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031e6:	f023 030c 	bic.w	r3, r3, #12
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699a      	ldr	r2, [r3, #24]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2c      	ldr	r2, [pc, #176]	; (80032c0 <UART_SetConfig+0x114>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003214:	f7fe ff30 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	e002      	b.n	8003222 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800321c:	f7fe ff18 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 8003220:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009a      	lsls	r2, r3, #2
 800322c:	441a      	add	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <UART_SetConfig+0x118>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	0119      	lsls	r1, r3, #4
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009a      	lsls	r2, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fbb2 f2f3 	udiv	r2, r2, r3
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <UART_SetConfig+0x118>)
 800325a:	fba3 0302 	umull	r0, r3, r3, r2
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2064      	movs	r0, #100	; 0x64
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	3332      	adds	r3, #50	; 0x32
 800326c:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <UART_SetConfig+0x118>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003278:	4419      	add	r1, r3
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009a      	lsls	r2, r3, #2
 8003284:	441a      	add	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <UART_SetConfig+0x118>)
 8003292:	fba3 0302 	umull	r0, r3, r3, r2
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2064      	movs	r0, #100	; 0x64
 800329a:	fb00 f303 	mul.w	r3, r0, r3
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	3332      	adds	r3, #50	; 0x32
 80032a4:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <UART_SetConfig+0x118>)
 80032a6:	fba2 2303 	umull	r2, r3, r2, r3
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	440a      	add	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032b8:	bf00      	nop
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40013800 	.word	0x40013800
 80032c4:	51eb851f 	.word	0x51eb851f

080032c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80032d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032da:	2b84      	cmp	r3, #132	; 0x84
 80032dc:	d005      	beq.n	80032ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80032de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	3303      	adds	r3, #3
 80032e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80032ea:	68fb      	ldr	r3, [r7, #12]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032fc:	f3ef 8305 	mrs	r3, IPSR
 8003300:	607b      	str	r3, [r7, #4]
  return(result);
 8003302:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800331c:	f000 fcb2 	bl	8003c84 <vTaskStartScheduler>
  
  return osOK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	bd80      	pop	{r7, pc}

08003326 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003326:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003328:	b089      	sub	sp, #36	; 0x24
 800332a:	af04      	add	r7, sp, #16
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <osThreadCreate+0x54>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d01c      	beq.n	800337a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685c      	ldr	r4, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681d      	ldr	r5, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691e      	ldr	r6, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff ffb8 	bl	80032c8 <makeFreeRtosPriority>
 8003358:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003362:	9202      	str	r2, [sp, #8]
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	9100      	str	r1, [sp, #0]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4632      	mov	r2, r6
 800336c:	4629      	mov	r1, r5
 800336e:	4620      	mov	r0, r4
 8003370:	f000 f917 	bl	80035a2 <xTaskCreateStatic>
 8003374:	4603      	mov	r3, r0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e01c      	b.n	80033b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685c      	ldr	r4, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003386:	b29e      	uxth	r6, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff ff9a 	bl	80032c8 <makeFreeRtosPriority>
 8003394:	4602      	mov	r2, r0
 8003396:	f107 030c 	add.w	r3, r7, #12
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	9200      	str	r2, [sp, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	4632      	mov	r2, r6
 80033a2:	4629      	mov	r1, r5
 80033a4:	4620      	mov	r0, r4
 80033a6:	f000 f958 	bl	800365a <xTaskCreate>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d001      	beq.n	80033b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e000      	b.n	80033b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80033b4:	68fb      	ldr	r3, [r7, #12]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <osDelay+0x16>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	e000      	b.n	80033d6 <osDelay+0x18>
 80033d4:	2301      	movs	r3, #1
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fa84 	bl	80038e4 <vTaskDelay>
  
  return osOK;
 80033dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 faac 	bl	800394c <vTaskSuspend>
  
  return osOK;
 80033f4:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8003408:	f7ff ff75 	bl	80032f6 <inHandlerMode>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00e      	beq.n	8003430 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fbc4 	bl	8003ba0 <xTaskResumeFromISR>
 8003418:	4603      	mov	r3, r0
 800341a:	2b01      	cmp	r3, #1
 800341c:	d10b      	bne.n	8003436 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <osThreadResume+0x40>)
 8003420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	e002      	b.n	8003436 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fb57 	bl	8003ae4 <vTaskResume>
  }
  return osOK;
 8003436:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	e000ed04 	.word	0xe000ed04

08003444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f103 0208 	add.w	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f103 0208 	add.w	r2, r3, #8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f103 0208 	add.w	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d103      	bne.n	8003500 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	e00c      	b.n	800351a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3308      	adds	r3, #8
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e002      	b.n	800350e <vListInsert+0x2e>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	d2f6      	bcs.n	8003508 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6892      	ldr	r2, [r2, #8]
 8003566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6852      	ldr	r2, [r2, #4]
 8003570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d103      	bne.n	8003584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	1e5a      	subs	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b08e      	sub	sp, #56	; 0x38
 80035a6:	af04      	add	r7, sp, #16
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10a      	bne.n	80035cc <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ba:	f383 8811 	msr	BASEPRI, r3
 80035be:	f3bf 8f6f 	isb	sy
 80035c2:	f3bf 8f4f 	dsb	sy
 80035c6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035c8:	bf00      	nop
 80035ca:	e7fe      	b.n	80035ca <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <xTaskCreateStatic+0x46>
	__asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	61fb      	str	r3, [r7, #28]
}
 80035e4:	bf00      	nop
 80035e6:	e7fe      	b.n	80035e6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035e8:	23b4      	movs	r3, #180	; 0xb4
 80035ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2bb4      	cmp	r3, #180	; 0xb4
 80035f0:	d00a      	beq.n	8003608 <xTaskCreateStatic+0x66>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	61bb      	str	r3, [r7, #24]
}
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01e      	beq.n	800364c <xTaskCreateStatic+0xaa>
 800360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01b      	beq.n	800364c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800361c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	2202      	movs	r2, #2
 8003622:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003626:	2300      	movs	r3, #0
 8003628:	9303      	str	r3, [sp, #12]
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	9302      	str	r3, [sp, #8]
 800362e:	f107 0314 	add.w	r3, r7, #20
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f850 	bl	80036e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003646:	f000 f8e3 	bl	8003810 <prvAddNewTaskToReadyList>
 800364a:	e001      	b.n	8003650 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003650:	697b      	ldr	r3, [r7, #20]
	}
 8003652:	4618      	mov	r0, r3
 8003654:	3728      	adds	r7, #40	; 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800365a:	b580      	push	{r7, lr}
 800365c:	b08c      	sub	sp, #48	; 0x30
 800365e:	af04      	add	r7, sp, #16
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4618      	mov	r0, r3
 8003670:	f001 f88c 	bl	800478c <pvPortMalloc>
 8003674:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00e      	beq.n	800369a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800367c:	20b4      	movs	r0, #180	; 0xb4
 800367e:	f001 f885 	bl	800478c <pvPortMalloc>
 8003682:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
 8003690:	e005      	b.n	800369e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f001 f8c0 	bl	8004818 <vPortFree>
 8003698:	e001      	b.n	800369e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d017      	beq.n	80036d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	2300      	movs	r3, #0
 80036b0:	9303      	str	r3, [sp, #12]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	9302      	str	r3, [sp, #8]
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 f80e 	bl	80036e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036c8:	69f8      	ldr	r0, [r7, #28]
 80036ca:	f000 f8a1 	bl	8003810 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036ce:	2301      	movs	r3, #1
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	e002      	b.n	80036da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295
 80036d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036da:	69bb      	ldr	r3, [r7, #24]
	}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036fc:	3b01      	subs	r3, #1
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f023 0307 	bic.w	r3, r3, #7
 800370a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	617b      	str	r3, [r7, #20]
}
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800372c:	2300      	movs	r3, #0
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	e012      	b.n	8003758 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	7819      	ldrb	r1, [r3, #0]
 800373a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	3334      	adds	r3, #52	; 0x34
 8003742:	460a      	mov	r2, r1
 8003744:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d006      	beq.n	8003760 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3301      	adds	r3, #1
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b0f      	cmp	r3, #15
 800375c:	d9e9      	bls.n	8003732 <prvInitialiseNewTask+0x4e>
 800375e:	e000      	b.n	8003762 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003760:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	2b06      	cmp	r3, #6
 800376e:	d901      	bls.n	8003774 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003770:	2306      	movs	r3, #6
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003778:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800377e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	2200      	movs	r2, #0
 8003784:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	3304      	adds	r3, #4
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fe79 	bl	8003482 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	3318      	adds	r3, #24
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fe74 	bl	8003482 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a2:	f1c3 0207 	rsb	r2, r3, #7
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	334c      	adds	r3, #76	; 0x4c
 80037c4:	2260      	movs	r2, #96	; 0x60
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 f863 	bl	8004894 <memset>
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <prvInitialiseNewTask+0x120>)
 80037d2:	651a      	str	r2, [r3, #80]	; 0x50
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	4a0c      	ldr	r2, [pc, #48]	; (8003808 <prvInitialiseNewTask+0x124>)
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	4a0b      	ldr	r2, [pc, #44]	; (800380c <prvInitialiseNewTask+0x128>)
 80037de:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	68f9      	ldr	r1, [r7, #12]
 80037e4:	69b8      	ldr	r0, [r7, #24]
 80037e6:	f000 fde3 	bl	80043b0 <pxPortInitialiseStack>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037fc:	bf00      	nop
 80037fe:	3720      	adds	r7, #32
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	08004b28 	.word	0x08004b28
 8003808:	08004b48 	.word	0x08004b48
 800380c:	08004b08 	.word	0x08004b08

08003810 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003818:	f000 feb8 	bl	800458c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800381c:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <prvAddNewTaskToReadyList+0xb8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3301      	adds	r3, #1
 8003822:	4a29      	ldr	r2, [pc, #164]	; (80038c8 <prvAddNewTaskToReadyList+0xb8>)
 8003824:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003826:	4b29      	ldr	r3, [pc, #164]	; (80038cc <prvAddNewTaskToReadyList+0xbc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800382e:	4a27      	ldr	r2, [pc, #156]	; (80038cc <prvAddNewTaskToReadyList+0xbc>)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003834:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <prvAddNewTaskToReadyList+0xb8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d110      	bne.n	800385e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800383c:	f000 fc6e 	bl	800411c <prvInitialiseTaskLists>
 8003840:	e00d      	b.n	800385e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003842:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <prvAddNewTaskToReadyList+0xc0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <prvAddNewTaskToReadyList+0xbc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	429a      	cmp	r2, r3
 8003856:	d802      	bhi.n	800385e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003858:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <prvAddNewTaskToReadyList+0xbc>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800385e:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <prvAddNewTaskToReadyList+0xc4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3301      	adds	r3, #1
 8003864:	4a1b      	ldr	r2, [pc, #108]	; (80038d4 <prvAddNewTaskToReadyList+0xc4>)
 8003866:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	2201      	movs	r2, #1
 800386e:	409a      	lsls	r2, r3
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <prvAddNewTaskToReadyList+0xc8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4313      	orrs	r3, r2
 8003876:	4a18      	ldr	r2, [pc, #96]	; (80038d8 <prvAddNewTaskToReadyList+0xc8>)
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4a15      	ldr	r2, [pc, #84]	; (80038dc <prvAddNewTaskToReadyList+0xcc>)
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3304      	adds	r3, #4
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7ff fe02 	bl	800349a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003896:	f000 fea9 	bl	80045ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <prvAddNewTaskToReadyList+0xc0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00e      	beq.n	80038c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <prvAddNewTaskToReadyList+0xbc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d207      	bcs.n	80038c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <prvAddNewTaskToReadyList+0xd0>)
 80038b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000574 	.word	0x20000574
 80038cc:	20000474 	.word	0x20000474
 80038d0:	20000580 	.word	0x20000580
 80038d4:	20000590 	.word	0x20000590
 80038d8:	2000057c 	.word	0x2000057c
 80038dc:	20000478 	.word	0x20000478
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d017      	beq.n	8003926 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038f6:	4b13      	ldr	r3, [pc, #76]	; (8003944 <vTaskDelay+0x60>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <vTaskDelay+0x30>
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	60bb      	str	r3, [r7, #8]
}
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003914:	f000 fa20 	bl	8003d58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003918:	2100      	movs	r1, #0
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fce2 	bl	80042e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003920:	f000 fa28 	bl	8003d74 <xTaskResumeAll>
 8003924:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <vTaskDelay+0x64>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	2000059c 	.word	0x2000059c
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003954:	f000 fe1a 	bl	800458c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <vTaskSuspend+0x18>
 800395e:	4b3c      	ldr	r3, [pc, #240]	; (8003a50 <vTaskSuspend+0x104>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	e000      	b.n	8003966 <vTaskSuspend+0x1a>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3304      	adds	r3, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff fdef 	bl	8003550 <uxListRemove>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d115      	bne.n	80039a4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4935      	ldr	r1, [pc, #212]	; (8003a54 <vTaskSuspend+0x108>)
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <vTaskSuspend+0x58>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	2201      	movs	r2, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43da      	mvns	r2, r3
 800399a:	4b2f      	ldr	r3, [pc, #188]	; (8003a58 <vTaskSuspend+0x10c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4013      	ands	r3, r2
 80039a0:	4a2d      	ldr	r2, [pc, #180]	; (8003a58 <vTaskSuspend+0x10c>)
 80039a2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d004      	beq.n	80039b6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3318      	adds	r3, #24
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff fdcd 	bl	8003550 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4619      	mov	r1, r3
 80039bc:	4827      	ldr	r0, [pc, #156]	; (8003a5c <vTaskSuspend+0x110>)
 80039be:	f7ff fd6c 	bl	800349a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d103      	bne.n	80039d6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80039d6:	f000 fe09 	bl	80045ec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80039da:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <vTaskSuspend+0x114>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80039e2:	f000 fdd3 	bl	800458c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80039e6:	f000 fc3b 	bl	8004260 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80039ea:	f000 fdff 	bl	80045ec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80039ee:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <vTaskSuspend+0x104>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d127      	bne.n	8003a48 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <vTaskSuspend+0x114>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d017      	beq.n	8003a30 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <vTaskSuspend+0x118>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00a      	beq.n	8003a1e <vTaskSuspend+0xd2>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	60bb      	str	r3, [r7, #8]
}
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <vTaskSuspend+0x11c>)
 8003a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a2e:	e00b      	b.n	8003a48 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <vTaskSuspend+0x110>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <vTaskSuspend+0x120>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d103      	bne.n	8003a44 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <vTaskSuspend+0x104>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
	}
 8003a42:	e001      	b.n	8003a48 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8003a44:	f000 faf0 	bl	8004028 <vTaskSwitchContext>
	}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000474 	.word	0x20000474
 8003a54:	20000478 	.word	0x20000478
 8003a58:	2000057c 	.word	0x2000057c
 8003a5c:	20000560 	.word	0x20000560
 8003a60:	20000580 	.word	0x20000580
 8003a64:	2000059c 	.word	0x2000059c
 8003a68:	e000ed04 	.word	0xe000ed04
 8003a6c:	20000574 	.word	0x20000574

08003a70 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	60fb      	str	r3, [r7, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <prvTaskIsTaskSuspended+0x6c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <prvTaskIsTaskSuspended+0x3a>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <prvTaskIsTaskSuspended+0x3c>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00f      	beq.n	8003ad0 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <prvTaskIsTaskSuspended+0x70>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00a      	beq.n	8003ad0 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <prvTaskIsTaskSuspended+0x56>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <prvTaskIsTaskSuspended+0x58>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ad0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	20000560 	.word	0x20000560
 8003ae0:	20000534 	.word	0x20000534

08003ae4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10a      	bne.n	8003b0c <vTaskResume+0x28>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	60bb      	str	r3, [r7, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d039      	beq.n	8003b86 <vTaskResume+0xa2>
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <vTaskResume+0xac>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d034      	beq.n	8003b86 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003b1c:	f000 fd36 	bl	800458c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f7ff ffa5 	bl	8003a70 <prvTaskIsTaskSuspended>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d02a      	beq.n	8003b82 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff fd0d 	bl	8003550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <vTaskResume+0xb0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <vTaskResume+0xb0>)
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <vTaskResume+0xb4>)
 8003b56:	441a      	add	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f7ff fc9b 	bl	800349a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <vTaskResume+0xac>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d307      	bcc.n	8003b82 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <vTaskResume+0xb8>)
 8003b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003b82:	f000 fd33 	bl	80045ec <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000474 	.word	0x20000474
 8003b94:	2000057c 	.word	0x2000057c
 8003b98:	20000478 	.word	0x20000478
 8003b9c:	e000ed04 	.word	0xe000ed04

08003ba0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	; 0x28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10a      	bne.n	8003bcc <xTaskResumeFromISR+0x2c>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	61bb      	str	r3, [r7, #24]
}
 8003bc8:	bf00      	nop
 8003bca:	e7fe      	b.n	8003bca <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bcc:	f000 fda0 	bl	8004710 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bd0:	f3ef 8211 	mrs	r2, BASEPRI
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	617a      	str	r2, [r7, #20]
 8003be6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003be8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bea:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003bec:	6a38      	ldr	r0, [r7, #32]
 8003bee:	f7ff ff3f 	bl	8003a70 <prvTaskIsTaskSuspended>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02f      	beq.n	8003c58 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <xTaskResumeFromISR+0xd0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d125      	bne.n	8003c4c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <xTaskResumeFromISR+0xd4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d301      	bcc.n	8003c12 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	3304      	adds	r3, #4
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fc9a 	bl	8003550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	2201      	movs	r2, #1
 8003c22:	409a      	lsls	r2, r3
 8003c24:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <xTaskResumeFromISR+0xd8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <xTaskResumeFromISR+0xd8>)
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4a10      	ldr	r2, [pc, #64]	; (8003c7c <xTaskResumeFromISR+0xdc>)
 8003c3c:	441a      	add	r2, r3
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f7ff fc28 	bl	800349a <vListInsertEnd>
 8003c4a:	e005      	b.n	8003c58 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	3318      	adds	r3, #24
 8003c50:	4619      	mov	r1, r3
 8003c52:	480b      	ldr	r0, [pc, #44]	; (8003c80 <xTaskResumeFromISR+0xe0>)
 8003c54:	f7ff fc21 	bl	800349a <vListInsertEnd>
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c62:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3728      	adds	r7, #40	; 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000059c 	.word	0x2000059c
 8003c74:	20000474 	.word	0x20000474
 8003c78:	2000057c 	.word	0x2000057c
 8003c7c:	20000478 	.word	0x20000478
 8003c80:	20000534 	.word	0x20000534

08003c84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	; 0x28
 8003c88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c92:	463a      	mov	r2, r7
 8003c94:	1d39      	adds	r1, r7, #4
 8003c96:	f107 0308 	add.w	r3, r7, #8
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fc fcd6 	bl	800064c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	9202      	str	r2, [sp, #8]
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	2300      	movs	r3, #0
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	460a      	mov	r2, r1
 8003cb2:	4921      	ldr	r1, [pc, #132]	; (8003d38 <vTaskStartScheduler+0xb4>)
 8003cb4:	4821      	ldr	r0, [pc, #132]	; (8003d3c <vTaskStartScheduler+0xb8>)
 8003cb6:	f7ff fc74 	bl	80035a2 <xTaskCreateStatic>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <vTaskStartScheduler+0xbc>)
 8003cbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cc0:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <vTaskStartScheduler+0xbc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e001      	b.n	8003cd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d11b      	bne.n	8003d10 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	613b      	str	r3, [r7, #16]
}
 8003cea:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003cec:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <vTaskStartScheduler+0xc0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	334c      	adds	r3, #76	; 0x4c
 8003cf2:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <vTaskStartScheduler+0xc4>)
 8003cf4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <vTaskStartScheduler+0xc8>)
 8003cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <vTaskStartScheduler+0xcc>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d04:	4b13      	ldr	r3, [pc, #76]	; (8003d54 <vTaskStartScheduler+0xd0>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d0a:	f000 fbcd 	bl	80044a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d0e:	e00e      	b.n	8003d2e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d10a      	bne.n	8003d2e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	60fb      	str	r3, [r7, #12]
}
 8003d2a:	bf00      	nop
 8003d2c:	e7fe      	b.n	8003d2c <vTaskStartScheduler+0xa8>
}
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	08004ae8 	.word	0x08004ae8
 8003d3c:	080040ed 	.word	0x080040ed
 8003d40:	20000598 	.word	0x20000598
 8003d44:	20000474 	.word	0x20000474
 8003d48:	20000010 	.word	0x20000010
 8003d4c:	20000594 	.word	0x20000594
 8003d50:	20000580 	.word	0x20000580
 8003d54:	20000578 	.word	0x20000578

08003d58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <vTaskSuspendAll+0x18>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	4a03      	ldr	r2, [pc, #12]	; (8003d70 <vTaskSuspendAll+0x18>)
 8003d64:	6013      	str	r3, [r2, #0]
}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	2000059c 	.word	0x2000059c

08003d74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d82:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <xTaskResumeAll+0x114>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	603b      	str	r3, [r7, #0]
}
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003da0:	f000 fbf4 	bl	800458c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003da4:	4b38      	ldr	r3, [pc, #224]	; (8003e88 <xTaskResumeAll+0x114>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	4a37      	ldr	r2, [pc, #220]	; (8003e88 <xTaskResumeAll+0x114>)
 8003dac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <xTaskResumeAll+0x114>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d161      	bne.n	8003e7a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003db6:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <xTaskResumeAll+0x118>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d05d      	beq.n	8003e7a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dbe:	e02e      	b.n	8003e1e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003dc0:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <xTaskResumeAll+0x11c>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3318      	adds	r3, #24
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fbbf 	bl	8003550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fbba 	bl	8003550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	2201      	movs	r2, #1
 8003de2:	409a      	lsls	r2, r3
 8003de4:	4b2b      	ldr	r3, [pc, #172]	; (8003e94 <xTaskResumeAll+0x120>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <xTaskResumeAll+0x120>)
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4a27      	ldr	r2, [pc, #156]	; (8003e98 <xTaskResumeAll+0x124>)
 8003dfc:	441a      	add	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f7ff fb48 	bl	800349a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0e:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <xTaskResumeAll+0x128>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <xTaskResumeAll+0x12c>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <xTaskResumeAll+0x11c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1cc      	bne.n	8003dc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e2c:	f000 fa18 	bl	8004260 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e30:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <xTaskResumeAll+0x130>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d010      	beq.n	8003e5e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e3c:	f000 f836 	bl	8003eac <xTaskIncrementTick>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e46:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <xTaskResumeAll+0x12c>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f1      	bne.n	8003e3c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <xTaskResumeAll+0x130>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <xTaskResumeAll+0x12c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e66:	2301      	movs	r3, #1
 8003e68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <xTaskResumeAll+0x134>)
 8003e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e7a:	f000 fbb7 	bl	80045ec <vPortExitCritical>

	return xAlreadyYielded;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	2000059c 	.word	0x2000059c
 8003e8c:	20000574 	.word	0x20000574
 8003e90:	20000534 	.word	0x20000534
 8003e94:	2000057c 	.word	0x2000057c
 8003e98:	20000478 	.word	0x20000478
 8003e9c:	20000474 	.word	0x20000474
 8003ea0:	20000588 	.word	0x20000588
 8003ea4:	20000584 	.word	0x20000584
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb6:	4b51      	ldr	r3, [pc, #324]	; (8003ffc <xTaskIncrementTick+0x150>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 808d 	bne.w	8003fda <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ec0:	4b4f      	ldr	r3, [pc, #316]	; (8004000 <xTaskIncrementTick+0x154>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ec8:	4a4d      	ldr	r2, [pc, #308]	; (8004000 <xTaskIncrementTick+0x154>)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d120      	bne.n	8003f16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <xTaskIncrementTick+0x158>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	603b      	str	r3, [r7, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	e7fe      	b.n	8003ef2 <xTaskIncrementTick+0x46>
 8003ef4:	4b43      	ldr	r3, [pc, #268]	; (8004004 <xTaskIncrementTick+0x158>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b43      	ldr	r3, [pc, #268]	; (8004008 <xTaskIncrementTick+0x15c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a41      	ldr	r2, [pc, #260]	; (8004004 <xTaskIncrementTick+0x158>)
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4a41      	ldr	r2, [pc, #260]	; (8004008 <xTaskIncrementTick+0x15c>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	4b40      	ldr	r3, [pc, #256]	; (800400c <xTaskIncrementTick+0x160>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	4a3f      	ldr	r2, [pc, #252]	; (800400c <xTaskIncrementTick+0x160>)
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	f000 f9a5 	bl	8004260 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f16:	4b3e      	ldr	r3, [pc, #248]	; (8004010 <xTaskIncrementTick+0x164>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d34d      	bcc.n	8003fbc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f20:	4b38      	ldr	r3, [pc, #224]	; (8004004 <xTaskIncrementTick+0x158>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <xTaskIncrementTick+0x82>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <xTaskIncrementTick+0x84>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f34:	4b36      	ldr	r3, [pc, #216]	; (8004010 <xTaskIncrementTick+0x164>)
 8003f36:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3a:	601a      	str	r2, [r3, #0]
					break;
 8003f3c:	e03e      	b.n	8003fbc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f3e:	4b31      	ldr	r3, [pc, #196]	; (8004004 <xTaskIncrementTick+0x158>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d203      	bcs.n	8003f5e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f56:	4a2e      	ldr	r2, [pc, #184]	; (8004010 <xTaskIncrementTick+0x164>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6013      	str	r3, [r2, #0]
						break;
 8003f5c:	e02e      	b.n	8003fbc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff faf4 	bl	8003550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d004      	beq.n	8003f7a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	3318      	adds	r3, #24
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff faeb 	bl	8003550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	2201      	movs	r2, #1
 8003f80:	409a      	lsls	r2, r3
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <xTaskIncrementTick+0x168>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	4a22      	ldr	r2, [pc, #136]	; (8004014 <xTaskIncrementTick+0x168>)
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4a1f      	ldr	r2, [pc, #124]	; (8004018 <xTaskIncrementTick+0x16c>)
 8003f9a:	441a      	add	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f7ff fa79 	bl	800349a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fac:	4b1b      	ldr	r3, [pc, #108]	; (800401c <xTaskIncrementTick+0x170>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d3b4      	bcc.n	8003f20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fba:	e7b1      	b.n	8003f20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fbc:	4b17      	ldr	r3, [pc, #92]	; (800401c <xTaskIncrementTick+0x170>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc2:	4915      	ldr	r1, [pc, #84]	; (8004018 <xTaskIncrementTick+0x16c>)
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d907      	bls.n	8003fe4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e004      	b.n	8003fe4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <xTaskIncrementTick+0x174>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	4a0f      	ldr	r2, [pc, #60]	; (8004020 <xTaskIncrementTick+0x174>)
 8003fe2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <xTaskIncrementTick+0x178>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ff0:	697b      	ldr	r3, [r7, #20]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	2000059c 	.word	0x2000059c
 8004000:	20000578 	.word	0x20000578
 8004004:	2000052c 	.word	0x2000052c
 8004008:	20000530 	.word	0x20000530
 800400c:	2000058c 	.word	0x2000058c
 8004010:	20000594 	.word	0x20000594
 8004014:	2000057c 	.word	0x2000057c
 8004018:	20000478 	.word	0x20000478
 800401c:	20000474 	.word	0x20000474
 8004020:	20000584 	.word	0x20000584
 8004024:	20000588 	.word	0x20000588

08004028 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800402e:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <vTaskSwitchContext+0xac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004036:	4b28      	ldr	r3, [pc, #160]	; (80040d8 <vTaskSwitchContext+0xb0>)
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800403c:	e044      	b.n	80040c8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800403e:	4b26      	ldr	r3, [pc, #152]	; (80040d8 <vTaskSwitchContext+0xb0>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <vTaskSwitchContext+0xb4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	fab3 f383 	clz	r3, r3
 8004050:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004052:	7afb      	ldrb	r3, [r7, #11]
 8004054:	f1c3 031f 	rsb	r3, r3, #31
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	4921      	ldr	r1, [pc, #132]	; (80040e0 <vTaskSwitchContext+0xb8>)
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <vTaskSwitchContext+0x5c>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	607b      	str	r3, [r7, #4]
}
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <vTaskSwitchContext+0x5a>
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <vTaskSwitchContext+0xb8>)
 8004090:	4413      	add	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	3308      	adds	r3, #8
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d104      	bne.n	80040b4 <vTaskSwitchContext+0x8c>
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <vTaskSwitchContext+0xbc>)
 80040bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <vTaskSwitchContext+0xbc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	334c      	adds	r3, #76	; 0x4c
 80040c4:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <vTaskSwitchContext+0xc0>)
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	2000059c 	.word	0x2000059c
 80040d8:	20000588 	.word	0x20000588
 80040dc:	2000057c 	.word	0x2000057c
 80040e0:	20000478 	.word	0x20000478
 80040e4:	20000474 	.word	0x20000474
 80040e8:	20000010 	.word	0x20000010

080040ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040f4:	f000 f852 	bl	800419c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <prvIdleTask+0x28>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d9f9      	bls.n	80040f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <prvIdleTask+0x2c>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004110:	e7f0      	b.n	80040f4 <prvIdleTask+0x8>
 8004112:	bf00      	nop
 8004114:	20000478 	.word	0x20000478
 8004118:	e000ed04 	.word	0xe000ed04

0800411c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	e00c      	b.n	8004142 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4a12      	ldr	r2, [pc, #72]	; (800417c <prvInitialiseTaskLists+0x60>)
 8004134:	4413      	add	r3, r2
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff f984 	bl	8003444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3301      	adds	r3, #1
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b06      	cmp	r3, #6
 8004146:	d9ef      	bls.n	8004128 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004148:	480d      	ldr	r0, [pc, #52]	; (8004180 <prvInitialiseTaskLists+0x64>)
 800414a:	f7ff f97b 	bl	8003444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800414e:	480d      	ldr	r0, [pc, #52]	; (8004184 <prvInitialiseTaskLists+0x68>)
 8004150:	f7ff f978 	bl	8003444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004154:	480c      	ldr	r0, [pc, #48]	; (8004188 <prvInitialiseTaskLists+0x6c>)
 8004156:	f7ff f975 	bl	8003444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800415a:	480c      	ldr	r0, [pc, #48]	; (800418c <prvInitialiseTaskLists+0x70>)
 800415c:	f7ff f972 	bl	8003444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004160:	480b      	ldr	r0, [pc, #44]	; (8004190 <prvInitialiseTaskLists+0x74>)
 8004162:	f7ff f96f 	bl	8003444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <prvInitialiseTaskLists+0x78>)
 8004168:	4a05      	ldr	r2, [pc, #20]	; (8004180 <prvInitialiseTaskLists+0x64>)
 800416a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <prvInitialiseTaskLists+0x7c>)
 800416e:	4a05      	ldr	r2, [pc, #20]	; (8004184 <prvInitialiseTaskLists+0x68>)
 8004170:	601a      	str	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000478 	.word	0x20000478
 8004180:	20000504 	.word	0x20000504
 8004184:	20000518 	.word	0x20000518
 8004188:	20000534 	.word	0x20000534
 800418c:	20000548 	.word	0x20000548
 8004190:	20000560 	.word	0x20000560
 8004194:	2000052c 	.word	0x2000052c
 8004198:	20000530 	.word	0x20000530

0800419c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a2:	e019      	b.n	80041d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041a4:	f000 f9f2 	bl	800458c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <prvCheckTasksWaitingTermination+0x50>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff f9cb 	bl	8003550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <prvCheckTasksWaitingTermination+0x54>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3b01      	subs	r3, #1
 80041c0:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <prvCheckTasksWaitingTermination+0x54>)
 80041c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <prvCheckTasksWaitingTermination+0x58>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	4a0a      	ldr	r2, [pc, #40]	; (80041f4 <prvCheckTasksWaitingTermination+0x58>)
 80041cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041ce:	f000 fa0d 	bl	80045ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f810 	bl	80041f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <prvCheckTasksWaitingTermination+0x58>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e1      	bne.n	80041a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041e0:	bf00      	nop
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000548 	.word	0x20000548
 80041f0:	20000574 	.word	0x20000574
 80041f4:	2000055c 	.word	0x2000055c

080041f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	334c      	adds	r3, #76	; 0x4c
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fb5b 	bl	80048c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d108      	bne.n	8004226 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fafd 	bl	8004818 <vPortFree>
				vPortFree( pxTCB );
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fafa 	bl	8004818 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004224:	e018      	b.n	8004258 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800422c:	2b01      	cmp	r3, #1
 800422e:	d103      	bne.n	8004238 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 faf1 	bl	8004818 <vPortFree>
	}
 8004236:	e00f      	b.n	8004258 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800423e:	2b02      	cmp	r3, #2
 8004240:	d00a      	beq.n	8004258 <prvDeleteTCB+0x60>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	60fb      	str	r3, [r7, #12]
}
 8004254:	bf00      	nop
 8004256:	e7fe      	b.n	8004256 <prvDeleteTCB+0x5e>
	}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <prvResetNextTaskUnblockTime+0x40>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <prvResetNextTaskUnblockTime+0x14>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <prvResetNextTaskUnblockTime+0x16>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800427a:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <prvResetNextTaskUnblockTime+0x44>)
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004282:	e008      	b.n	8004296 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <prvResetNextTaskUnblockTime+0x40>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4a04      	ldr	r2, [pc, #16]	; (80042a4 <prvResetNextTaskUnblockTime+0x44>)
 8004294:	6013      	str	r3, [r2, #0]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	2000052c 	.word	0x2000052c
 80042a4:	20000594 	.word	0x20000594

080042a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <xTaskGetSchedulerState+0x34>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d102      	bne.n	80042bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042b6:	2301      	movs	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	e008      	b.n	80042ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042bc:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <xTaskGetSchedulerState+0x38>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042c4:	2302      	movs	r3, #2
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	e001      	b.n	80042ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ca:	2300      	movs	r3, #0
 80042cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042ce:	687b      	ldr	r3, [r7, #4]
	}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000580 	.word	0x20000580
 80042e0:	2000059c 	.word	0x2000059c

080042e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042ee:	4b29      	ldr	r3, [pc, #164]	; (8004394 <prvAddCurrentTaskToDelayedList+0xb0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042f4:	4b28      	ldr	r3, [pc, #160]	; (8004398 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f928 	bl	8003550 <uxListRemove>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10b      	bne.n	800431e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004306:	4b24      	ldr	r3, [pc, #144]	; (8004398 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	2201      	movs	r2, #1
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43da      	mvns	r2, r3
 8004314:	4b21      	ldr	r3, [pc, #132]	; (800439c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4013      	ands	r3, r2
 800431a:	4a20      	ldr	r2, [pc, #128]	; (800439c <prvAddCurrentTaskToDelayedList+0xb8>)
 800431c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d10a      	bne.n	800433c <prvAddCurrentTaskToDelayedList+0x58>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <prvAddCurrentTaskToDelayedList+0xb4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3304      	adds	r3, #4
 8004332:	4619      	mov	r1, r3
 8004334:	481a      	ldr	r0, [pc, #104]	; (80043a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004336:	f7ff f8b0 	bl	800349a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800433a:	e026      	b.n	800438a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	429a      	cmp	r2, r3
 8004352:	d209      	bcs.n	8004368 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004354:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <prvAddCurrentTaskToDelayedList+0xb4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7ff f8bd 	bl	80034e0 <vListInsert>
}
 8004366:	e010      	b.n	800438a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <prvAddCurrentTaskToDelayedList+0xb4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3304      	adds	r3, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7ff f8b3 	bl	80034e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800437a:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	429a      	cmp	r2, r3
 8004382:	d202      	bcs.n	800438a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004384:	4a09      	ldr	r2, [pc, #36]	; (80043ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	6013      	str	r3, [r2, #0]
}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000578 	.word	0x20000578
 8004398:	20000474 	.word	0x20000474
 800439c:	2000057c 	.word	0x2000057c
 80043a0:	20000560 	.word	0x20000560
 80043a4:	20000530 	.word	0x20000530
 80043a8:	2000052c 	.word	0x2000052c
 80043ac:	20000594 	.word	0x20000594

080043b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3b04      	subs	r3, #4
 80043c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3b04      	subs	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f023 0201 	bic.w	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b04      	subs	r3, #4
 80043de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043e0:	4a08      	ldr	r2, [pc, #32]	; (8004404 <pxPortInitialiseStack+0x54>)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3b14      	subs	r3, #20
 80043ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3b20      	subs	r3, #32
 80043f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043f8:	68fb      	ldr	r3, [r7, #12]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	08004409 	.word	0x08004409

08004408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004412:	4b12      	ldr	r3, [pc, #72]	; (800445c <prvTaskExitError+0x54>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d00a      	beq.n	8004432 <prvTaskExitError+0x2a>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	60fb      	str	r3, [r7, #12]
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <prvTaskExitError+0x28>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	60bb      	str	r3, [r7, #8]
}
 8004444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004446:	bf00      	nop
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0fc      	beq.n	8004448 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800444e:	bf00      	nop
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	2000000c 	.word	0x2000000c

08004460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <pxCurrentTCBConst2>)
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	6808      	ldr	r0, [r1, #0]
 8004466:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800446a:	f380 8809 	msr	PSP, r0
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8811 	msr	BASEPRI, r0
 800447a:	f04e 0e0d 	orr.w	lr, lr, #13
 800447e:	4770      	bx	lr

08004480 <pxCurrentTCBConst2>:
 8004480:	20000474 	.word	0x20000474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004488:	4806      	ldr	r0, [pc, #24]	; (80044a4 <prvPortStartFirstTask+0x1c>)
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	6800      	ldr	r0, [r0, #0]
 800448e:	f380 8808 	msr	MSP, r0
 8004492:	b662      	cpsie	i
 8004494:	b661      	cpsie	f
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	df00      	svc	0
 80044a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044a2:	bf00      	nop
 80044a4:	e000ed08 	.word	0xe000ed08

080044a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ae:	4b32      	ldr	r3, [pc, #200]	; (8004578 <xPortStartScheduler+0xd0>)
 80044b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	22ff      	movs	r2, #255	; 0xff
 80044be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	4b2a      	ldr	r3, [pc, #168]	; (800457c <xPortStartScheduler+0xd4>)
 80044d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044d6:	4b2a      	ldr	r3, [pc, #168]	; (8004580 <xPortStartScheduler+0xd8>)
 80044d8:	2207      	movs	r2, #7
 80044da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044dc:	e009      	b.n	80044f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80044de:	4b28      	ldr	r3, [pc, #160]	; (8004580 <xPortStartScheduler+0xd8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4a26      	ldr	r2, [pc, #152]	; (8004580 <xPortStartScheduler+0xd8>)
 80044e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b80      	cmp	r3, #128	; 0x80
 80044fc:	d0ef      	beq.n	80044de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044fe:	4b20      	ldr	r3, [pc, #128]	; (8004580 <xPortStartScheduler+0xd8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1c3 0307 	rsb	r3, r3, #7
 8004506:	2b04      	cmp	r3, #4
 8004508:	d00a      	beq.n	8004520 <xPortStartScheduler+0x78>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60bb      	str	r3, [r7, #8]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004520:	4b17      	ldr	r3, [pc, #92]	; (8004580 <xPortStartScheduler+0xd8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	4a16      	ldr	r2, [pc, #88]	; (8004580 <xPortStartScheduler+0xd8>)
 8004528:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <xPortStartScheduler+0xd8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004532:	4a13      	ldr	r2, [pc, #76]	; (8004580 <xPortStartScheduler+0xd8>)
 8004534:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800453e:	4b11      	ldr	r3, [pc, #68]	; (8004584 <xPortStartScheduler+0xdc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a10      	ldr	r2, [pc, #64]	; (8004584 <xPortStartScheduler+0xdc>)
 8004544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004548:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <xPortStartScheduler+0xdc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <xPortStartScheduler+0xdc>)
 8004550:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004554:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004556:	f000 f8b9 	bl	80046cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <xPortStartScheduler+0xe0>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004560:	f7ff ff92 	bl	8004488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004564:	f7ff fd60 	bl	8004028 <vTaskSwitchContext>
	prvTaskExitError();
 8004568:	f7ff ff4e 	bl	8004408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	e000e400 	.word	0xe000e400
 800457c:	200005a0 	.word	0x200005a0
 8004580:	200005a4 	.word	0x200005a4
 8004584:	e000ed20 	.word	0xe000ed20
 8004588:	2000000c 	.word	0x2000000c

0800458c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
	__asm volatile
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	607b      	str	r3, [r7, #4]
}
 80045a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045a6:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <vPortEnterCritical+0x58>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3301      	adds	r3, #1
 80045ac:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <vPortEnterCritical+0x58>)
 80045ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <vPortEnterCritical+0x58>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d10f      	bne.n	80045d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <vPortEnterCritical+0x5c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	603b      	str	r3, [r7, #0]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <vPortEnterCritical+0x4a>
	}
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	2000000c 	.word	0x2000000c
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045f2:	4b11      	ldr	r3, [pc, #68]	; (8004638 <vPortExitCritical+0x4c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <vPortExitCritical+0x24>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	607b      	str	r3, [r7, #4]
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004610:	4b09      	ldr	r3, [pc, #36]	; (8004638 <vPortExitCritical+0x4c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3b01      	subs	r3, #1
 8004616:	4a08      	ldr	r2, [pc, #32]	; (8004638 <vPortExitCritical+0x4c>)
 8004618:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800461a:	4b07      	ldr	r3, [pc, #28]	; (8004638 <vPortExitCritical+0x4c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d105      	bne.n	800462e <vPortExitCritical+0x42>
 8004622:	2300      	movs	r3, #0
 8004624:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f383 8811 	msr	BASEPRI, r3
}
 800462c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	2000000c 	.word	0x2000000c
 800463c:	00000000 	.word	0x00000000

08004640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004640:	f3ef 8009 	mrs	r0, PSP
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <pxCurrentTCBConst>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004650:	6010      	str	r0, [r2, #0]
 8004652:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004656:	f04f 0050 	mov.w	r0, #80	; 0x50
 800465a:	f380 8811 	msr	BASEPRI, r0
 800465e:	f7ff fce3 	bl	8004028 <vTaskSwitchContext>
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8811 	msr	BASEPRI, r0
 800466a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	6808      	ldr	r0, [r1, #0]
 8004672:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004676:	f380 8809 	msr	PSP, r0
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	4770      	bx	lr

08004680 <pxCurrentTCBConst>:
 8004680:	20000474 	.word	0x20000474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
	__asm volatile
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	607b      	str	r3, [r7, #4]
}
 80046a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80046a2:	f7ff fc03 	bl	8003eac <xTaskIncrementTick>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <xPortSysTickHandler+0x40>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f383 8811 	msr	BASEPRI, r3
}
 80046be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	e000ed04 	.word	0xe000ed04

080046cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <vPortSetupTimerInterrupt+0x30>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <vPortSetupTimerInterrupt+0x34>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046dc:	4b09      	ldr	r3, [pc, #36]	; (8004704 <vPortSetupTimerInterrupt+0x38>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a09      	ldr	r2, [pc, #36]	; (8004708 <vPortSetupTimerInterrupt+0x3c>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	4a08      	ldr	r2, [pc, #32]	; (800470c <vPortSetupTimerInterrupt+0x40>)
 80046ea:	3b01      	subs	r3, #1
 80046ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046ee:	4b03      	ldr	r3, [pc, #12]	; (80046fc <vPortSetupTimerInterrupt+0x30>)
 80046f0:	2207      	movs	r2, #7
 80046f2:	601a      	str	r2, [r3, #0]
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	e000e010 	.word	0xe000e010
 8004700:	e000e018 	.word	0xe000e018
 8004704:	20000000 	.word	0x20000000
 8004708:	10624dd3 	.word	0x10624dd3
 800470c:	e000e014 	.word	0xe000e014

08004710 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004716:	f3ef 8305 	mrs	r3, IPSR
 800471a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b0f      	cmp	r3, #15
 8004720:	d914      	bls.n	800474c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004722:	4a16      	ldr	r2, [pc, #88]	; (800477c <vPortValidateInterruptPriority+0x6c>)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800472c:	4b14      	ldr	r3, [pc, #80]	; (8004780 <vPortValidateInterruptPriority+0x70>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	7afa      	ldrb	r2, [r7, #11]
 8004732:	429a      	cmp	r2, r3
 8004734:	d20a      	bcs.n	800474c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	607b      	str	r3, [r7, #4]
}
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800474c:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <vPortValidateInterruptPriority+0x74>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004754:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <vPortValidateInterruptPriority+0x78>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d90a      	bls.n	8004772 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	603b      	str	r3, [r7, #0]
}
 800476e:	bf00      	nop
 8004770:	e7fe      	b.n	8004770 <vPortValidateInterruptPriority+0x60>
	}
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	e000e3f0 	.word	0xe000e3f0
 8004780:	200005a0 	.word	0x200005a0
 8004784:	e000ed0c 	.word	0xe000ed0c
 8004788:	200005a4 	.word	0x200005a4

0800478c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d004      	beq.n	80047ac <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f023 0307 	bic.w	r3, r3, #7
 80047a8:	3308      	adds	r3, #8
 80047aa:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80047ac:	f7ff fad4 	bl	8003d58 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80047b0:	4b16      	ldr	r3, [pc, #88]	; (800480c <pvPortMalloc+0x80>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d105      	bne.n	80047c4 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <pvPortMalloc+0x84>)
 80047ba:	f023 0307 	bic.w	r3, r3, #7
 80047be:	461a      	mov	r2, r3
 80047c0:	4b12      	ldr	r3, [pc, #72]	; (800480c <pvPortMalloc+0x80>)
 80047c2:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80047c4:	4b13      	ldr	r3, [pc, #76]	; (8004814 <pvPortMalloc+0x88>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4413      	add	r3, r2
 80047cc:	f640 32f7 	movw	r2, #3063	; 0xbf7
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d813      	bhi.n	80047fc <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <pvPortMalloc+0x88>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	441a      	add	r2, r3
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <pvPortMalloc+0x88>)
 80047de:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d90b      	bls.n	80047fc <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <pvPortMalloc+0x80>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <pvPortMalloc+0x88>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4413      	add	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 80047f0:	4b08      	ldr	r3, [pc, #32]	; (8004814 <pvPortMalloc+0x88>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4413      	add	r3, r2
 80047f8:	4a06      	ldr	r2, [pc, #24]	; (8004814 <pvPortMalloc+0x88>)
 80047fa:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047fc:	f7ff faba 	bl	8003d74 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8004800:	68fb      	ldr	r3, [r7, #12]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	200011ac 	.word	0x200011ac
 8004810:	200005b0 	.word	0x200005b0
 8004814:	200011a8 	.word	0x200011a8

08004818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <vPortFree+0x24>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60fb      	str	r3, [r7, #12]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <vPortFree+0x22>
}
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr
	...

08004848 <__libc_init_array>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	2600      	movs	r6, #0
 800484c:	4d0c      	ldr	r5, [pc, #48]	; (8004880 <__libc_init_array+0x38>)
 800484e:	4c0d      	ldr	r4, [pc, #52]	; (8004884 <__libc_init_array+0x3c>)
 8004850:	1b64      	subs	r4, r4, r5
 8004852:	10a4      	asrs	r4, r4, #2
 8004854:	42a6      	cmp	r6, r4
 8004856:	d109      	bne.n	800486c <__libc_init_array+0x24>
 8004858:	f000 f8e2 	bl	8004a20 <_init>
 800485c:	2600      	movs	r6, #0
 800485e:	4d0a      	ldr	r5, [pc, #40]	; (8004888 <__libc_init_array+0x40>)
 8004860:	4c0a      	ldr	r4, [pc, #40]	; (800488c <__libc_init_array+0x44>)
 8004862:	1b64      	subs	r4, r4, r5
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	42a6      	cmp	r6, r4
 8004868:	d105      	bne.n	8004876 <__libc_init_array+0x2e>
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004870:	4798      	blx	r3
 8004872:	3601      	adds	r6, #1
 8004874:	e7ee      	b.n	8004854 <__libc_init_array+0xc>
 8004876:	f855 3b04 	ldr.w	r3, [r5], #4
 800487a:	4798      	blx	r3
 800487c:	3601      	adds	r6, #1
 800487e:	e7f2      	b.n	8004866 <__libc_init_array+0x1e>
 8004880:	08004b68 	.word	0x08004b68
 8004884:	08004b68 	.word	0x08004b68
 8004888:	08004b68 	.word	0x08004b68
 800488c:	08004b6c 	.word	0x08004b6c

08004890 <__retarget_lock_acquire_recursive>:
 8004890:	4770      	bx	lr

08004892 <__retarget_lock_release_recursive>:
 8004892:	4770      	bx	lr

08004894 <memset>:
 8004894:	4603      	mov	r3, r0
 8004896:	4402      	add	r2, r0
 8004898:	4293      	cmp	r3, r2
 800489a:	d100      	bne.n	800489e <memset+0xa>
 800489c:	4770      	bx	lr
 800489e:	f803 1b01 	strb.w	r1, [r3], #1
 80048a2:	e7f9      	b.n	8004898 <memset+0x4>

080048a4 <cleanup_glue>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	460c      	mov	r4, r1
 80048a8:	6809      	ldr	r1, [r1, #0]
 80048aa:	4605      	mov	r5, r0
 80048ac:	b109      	cbz	r1, 80048b2 <cleanup_glue+0xe>
 80048ae:	f7ff fff9 	bl	80048a4 <cleanup_glue>
 80048b2:	4621      	mov	r1, r4
 80048b4:	4628      	mov	r0, r5
 80048b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ba:	f000 b869 	b.w	8004990 <_free_r>
	...

080048c0 <_reclaim_reent>:
 80048c0:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <_reclaim_reent+0xb4>)
 80048c2:	b570      	push	{r4, r5, r6, lr}
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4604      	mov	r4, r0
 80048c8:	4283      	cmp	r3, r0
 80048ca:	d051      	beq.n	8004970 <_reclaim_reent+0xb0>
 80048cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048ce:	b143      	cbz	r3, 80048e2 <_reclaim_reent+0x22>
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d14a      	bne.n	800496c <_reclaim_reent+0xac>
 80048d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048d8:	6819      	ldr	r1, [r3, #0]
 80048da:	b111      	cbz	r1, 80048e2 <_reclaim_reent+0x22>
 80048dc:	4620      	mov	r0, r4
 80048de:	f000 f857 	bl	8004990 <_free_r>
 80048e2:	6961      	ldr	r1, [r4, #20]
 80048e4:	b111      	cbz	r1, 80048ec <_reclaim_reent+0x2c>
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 f852 	bl	8004990 <_free_r>
 80048ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048ee:	b111      	cbz	r1, 80048f6 <_reclaim_reent+0x36>
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 f84d 	bl	8004990 <_free_r>
 80048f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80048f8:	b111      	cbz	r1, 8004900 <_reclaim_reent+0x40>
 80048fa:	4620      	mov	r0, r4
 80048fc:	f000 f848 	bl	8004990 <_free_r>
 8004900:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004902:	b111      	cbz	r1, 800490a <_reclaim_reent+0x4a>
 8004904:	4620      	mov	r0, r4
 8004906:	f000 f843 	bl	8004990 <_free_r>
 800490a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800490c:	b111      	cbz	r1, 8004914 <_reclaim_reent+0x54>
 800490e:	4620      	mov	r0, r4
 8004910:	f000 f83e 	bl	8004990 <_free_r>
 8004914:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004916:	b111      	cbz	r1, 800491e <_reclaim_reent+0x5e>
 8004918:	4620      	mov	r0, r4
 800491a:	f000 f839 	bl	8004990 <_free_r>
 800491e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004920:	b111      	cbz	r1, 8004928 <_reclaim_reent+0x68>
 8004922:	4620      	mov	r0, r4
 8004924:	f000 f834 	bl	8004990 <_free_r>
 8004928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800492a:	b111      	cbz	r1, 8004932 <_reclaim_reent+0x72>
 800492c:	4620      	mov	r0, r4
 800492e:	f000 f82f 	bl	8004990 <_free_r>
 8004932:	69a3      	ldr	r3, [r4, #24]
 8004934:	b1e3      	cbz	r3, 8004970 <_reclaim_reent+0xb0>
 8004936:	4620      	mov	r0, r4
 8004938:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800493a:	4798      	blx	r3
 800493c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800493e:	b1b9      	cbz	r1, 8004970 <_reclaim_reent+0xb0>
 8004940:	4620      	mov	r0, r4
 8004942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004946:	f7ff bfad 	b.w	80048a4 <cleanup_glue>
 800494a:	5949      	ldr	r1, [r1, r5]
 800494c:	b941      	cbnz	r1, 8004960 <_reclaim_reent+0xa0>
 800494e:	3504      	adds	r5, #4
 8004950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004952:	2d80      	cmp	r5, #128	; 0x80
 8004954:	68d9      	ldr	r1, [r3, #12]
 8004956:	d1f8      	bne.n	800494a <_reclaim_reent+0x8a>
 8004958:	4620      	mov	r0, r4
 800495a:	f000 f819 	bl	8004990 <_free_r>
 800495e:	e7ba      	b.n	80048d6 <_reclaim_reent+0x16>
 8004960:	680e      	ldr	r6, [r1, #0]
 8004962:	4620      	mov	r0, r4
 8004964:	f000 f814 	bl	8004990 <_free_r>
 8004968:	4631      	mov	r1, r6
 800496a:	e7ef      	b.n	800494c <_reclaim_reent+0x8c>
 800496c:	2500      	movs	r5, #0
 800496e:	e7ef      	b.n	8004950 <_reclaim_reent+0x90>
 8004970:	bd70      	pop	{r4, r5, r6, pc}
 8004972:	bf00      	nop
 8004974:	20000010 	.word	0x20000010

08004978 <__malloc_lock>:
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <__malloc_lock+0x8>)
 800497a:	f7ff bf89 	b.w	8004890 <__retarget_lock_acquire_recursive>
 800497e:	bf00      	nop
 8004980:	200011b0 	.word	0x200011b0

08004984 <__malloc_unlock>:
 8004984:	4801      	ldr	r0, [pc, #4]	; (800498c <__malloc_unlock+0x8>)
 8004986:	f7ff bf84 	b.w	8004892 <__retarget_lock_release_recursive>
 800498a:	bf00      	nop
 800498c:	200011b0 	.word	0x200011b0

08004990 <_free_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4605      	mov	r5, r0
 8004994:	2900      	cmp	r1, #0
 8004996:	d040      	beq.n	8004a1a <_free_r+0x8a>
 8004998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499c:	1f0c      	subs	r4, r1, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bfb8      	it	lt
 80049a2:	18e4      	addlt	r4, r4, r3
 80049a4:	f7ff ffe8 	bl	8004978 <__malloc_lock>
 80049a8:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <_free_r+0x8c>)
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	b933      	cbnz	r3, 80049bc <_free_r+0x2c>
 80049ae:	6063      	str	r3, [r4, #4]
 80049b0:	6014      	str	r4, [r2, #0]
 80049b2:	4628      	mov	r0, r5
 80049b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049b8:	f7ff bfe4 	b.w	8004984 <__malloc_unlock>
 80049bc:	42a3      	cmp	r3, r4
 80049be:	d908      	bls.n	80049d2 <_free_r+0x42>
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	1821      	adds	r1, r4, r0
 80049c4:	428b      	cmp	r3, r1
 80049c6:	bf01      	itttt	eq
 80049c8:	6819      	ldreq	r1, [r3, #0]
 80049ca:	685b      	ldreq	r3, [r3, #4]
 80049cc:	1809      	addeq	r1, r1, r0
 80049ce:	6021      	streq	r1, [r4, #0]
 80049d0:	e7ed      	b.n	80049ae <_free_r+0x1e>
 80049d2:	461a      	mov	r2, r3
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	b10b      	cbz	r3, 80049dc <_free_r+0x4c>
 80049d8:	42a3      	cmp	r3, r4
 80049da:	d9fa      	bls.n	80049d2 <_free_r+0x42>
 80049dc:	6811      	ldr	r1, [r2, #0]
 80049de:	1850      	adds	r0, r2, r1
 80049e0:	42a0      	cmp	r0, r4
 80049e2:	d10b      	bne.n	80049fc <_free_r+0x6c>
 80049e4:	6820      	ldr	r0, [r4, #0]
 80049e6:	4401      	add	r1, r0
 80049e8:	1850      	adds	r0, r2, r1
 80049ea:	4283      	cmp	r3, r0
 80049ec:	6011      	str	r1, [r2, #0]
 80049ee:	d1e0      	bne.n	80049b2 <_free_r+0x22>
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	4401      	add	r1, r0
 80049f6:	6011      	str	r1, [r2, #0]
 80049f8:	6053      	str	r3, [r2, #4]
 80049fa:	e7da      	b.n	80049b2 <_free_r+0x22>
 80049fc:	d902      	bls.n	8004a04 <_free_r+0x74>
 80049fe:	230c      	movs	r3, #12
 8004a00:	602b      	str	r3, [r5, #0]
 8004a02:	e7d6      	b.n	80049b2 <_free_r+0x22>
 8004a04:	6820      	ldr	r0, [r4, #0]
 8004a06:	1821      	adds	r1, r4, r0
 8004a08:	428b      	cmp	r3, r1
 8004a0a:	bf01      	itttt	eq
 8004a0c:	6819      	ldreq	r1, [r3, #0]
 8004a0e:	685b      	ldreq	r3, [r3, #4]
 8004a10:	1809      	addeq	r1, r1, r0
 8004a12:	6021      	streq	r1, [r4, #0]
 8004a14:	6063      	str	r3, [r4, #4]
 8004a16:	6054      	str	r4, [r2, #4]
 8004a18:	e7cb      	b.n	80049b2 <_free_r+0x22>
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	200011b4 	.word	0x200011b4

08004a20 <_init>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr

08004a2c <_fini>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr
